<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>64Bytes</title><link href="https://64mega.github.io/" rel="alternate"></link><link href="https://64mega.github.io/feeds/all.atom.xml" rel="self"></link><id>https://64mega.github.io/</id><updated>2019-09-17T00:00:00+02:00</updated><subtitle>A miserable little pile of development secrets</subtitle><entry><title>JS13k 2019 Developer Commentary</title><link href="https://64mega.github.io/js13k-2019-recap.html" rel="alternate"></link><published>2019-09-17T00:00:00+02:00</published><updated>2019-09-17T00:00:00+02:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2019-09-17:/js13k-2019-recap.html</id><summary type="html">&lt;p&gt;In (hopefully) continuing tradition, here&amp;#8217;s a postmortem for my JS13k 2019 entry,&amp;nbsp;Xycore!&lt;/p&gt;
&lt;p&gt;Fair warning though, I&amp;#8217;m writing this well over two weeks since touching the majority of the code, so I might have forgotten some things, or misremembered some things. I also wrote &lt;em&gt;this&lt;/em&gt; over the period …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In (hopefully) continuing tradition, here&amp;#8217;s a postmortem for my JS13k 2019 entry,&amp;nbsp;Xycore!&lt;/p&gt;
&lt;p&gt;Fair warning though, I&amp;#8217;m writing this well over two weeks since touching the majority of the code, so I might have forgotten some things, or misremembered some things. I also wrote &lt;em&gt;this&lt;/em&gt; over the period of a week - it&amp;#8217;s likely to come across as a bit &lt;em&gt;disjointed&lt;/em&gt; or &lt;em&gt;random&lt;/em&gt;. You have been&amp;nbsp;warned.&lt;/p&gt;
&lt;p&gt;Feel free to hit me up on &lt;a href="https://twitter.com/64Mega"&gt;Twitter&lt;/a&gt; if you want some specific information on a feature that I glossed over or forgot to&amp;nbsp;mention.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fun fact: I practically reworked my blog&amp;#8217;s theme from the ground up during the course of writing this, to add useful features (Such as a fancybox gallery), a dark theme, proper code highlighting, some stylization of headings, a table of contents and a bunch of small style&amp;nbsp;adjustments.&lt;/p&gt;
&lt;p&gt;The theme I&amp;#8217;m using is &lt;code&gt;pelican-twitchy&lt;/code&gt;, but I&amp;#8217;ve changed nearly &lt;em&gt;everything&lt;/em&gt; at this point. The only thing I&amp;#8217;ve left alone is the sidebar&amp;nbsp;(Mostly).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This fancy Table of Contents will let you jump to any major heading, and if you want to quickly return to it, there&amp;#8217;s a fancy little &amp;#8220;Back to Top&amp;#8221; button at the bottom right of the&amp;nbsp;page.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#xycore-an-overview"&gt;Xycore: An&amp;nbsp;overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-original-idea"&gt;The original&amp;nbsp;idea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#art-style-limitations"&gt;Art Style&amp;nbsp;Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initial-design-decisions"&gt;Initial Design&amp;nbsp;Decisions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-note-on-my-design-process"&gt;A note on my design&amp;nbsp;process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-code"&gt;The&amp;nbsp;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#my-tools"&gt;My&amp;nbsp;Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-data-storage"&gt;Level Data&amp;nbsp;Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-canvas"&gt;The&amp;nbsp;Canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-organization"&gt;Code&amp;nbsp;Organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#development-process"&gt;Development Process&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#game-progression"&gt;Game&amp;nbsp;Progression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-bit-of-juice"&gt;A bit of&amp;nbsp;&amp;#8220;Juice&amp;#8221;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-bosses"&gt;The Bosses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-magma-centipede-boss"&gt;The &amp;#8220;Magma Centipede&amp;#8221;&amp;nbsp;boss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-venus-flytrap-boss"&gt;The &amp;#8220;Venus Flytrap&amp;#8221;&amp;nbsp;boss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-mother-brain-boss"&gt;The &amp;#8220;Mother Brain&amp;#8221;&amp;nbsp;boss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tank-boss"&gt;The &amp;#8220;Tank&amp;#8221;&amp;nbsp;Boss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#an-audio-experiment"&gt;An Audio&amp;nbsp;Experiment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-save-system"&gt;The Save&amp;nbsp;System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#player-progression"&gt;Player Progression&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#player-weapons"&gt;Player&amp;nbsp;Weapons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#barrier-doors"&gt;Barrier&amp;nbsp;Doors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#health-upgrades"&gt;Health&amp;nbsp;Upgrades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#armor-upgrades"&gt;Armor&amp;nbsp;Upgrades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enemy-variety"&gt;Enemy&amp;nbsp;Variety&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ending-and-escape-sequence"&gt;Ending and Escape&amp;nbsp;Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-canvas-flip-bug"&gt;The Canvas Flip&amp;nbsp;Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#submission"&gt;Submission&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#bug-1-monitor-sync-rate"&gt;Bug #1 - Monitor Sync&amp;nbsp;Rate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bug-2-color-profiles"&gt;Bug #2 - Color&amp;nbsp;Profiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-went-right"&gt;What Went&amp;nbsp;Right&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-went-wrong"&gt;What Went&amp;nbsp;Wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-ill-do-next"&gt;What I&amp;#8217;ll Do&amp;nbsp;Next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="xycore-an-overview"&gt;Xycore: An&amp;nbsp;overview&lt;/h3&gt;
&lt;p&gt;So first up, let&amp;#8217;s talk about the finished product!
In case you need it for reference or to give it a play, &lt;a href="https://js13kgames.com/entries/xycore"&gt;here&amp;#8217;s the link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Xycore is a throwback to a specific genre of games, drawing a lot of inspiration from Daniel Remar&amp;#8217;s
&lt;a href="http://www.remar.se/daniel/herocore.php"&gt;Hero Core&lt;/a&gt; and classic&amp;nbsp;Metroid.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ve landed on an alien planet at a secret weapons facility, with a mission to destroy the Super Reactor at the core of the facility. The core is sealed by the power of four guardians, and you must destroy them to complete your&amp;nbsp;objective.&lt;/p&gt;
&lt;p&gt;The game features four bosses, four weapon upgrades and a variety of hidden power-ups to help make the game easier.
I also managed to fit in a few out-of-scope features that I feel add a lot to the style of the game - namely a fancy
raster water effect, basic oscillator sounds and a bit of juice (Screenshake! Lerp!&amp;nbsp;Sometimes!)&lt;/p&gt;
&lt;h3 id="the-original-idea"&gt;The original&amp;nbsp;idea&lt;/h3&gt;
&lt;p&gt;When the 13th of August rolled around, I had a &lt;em&gt;completely&lt;/em&gt; different game in mind. In fact, it was less a game and more a fantasy console I was going to call&amp;nbsp;&amp;#8220;Mini13&amp;#8221;.&lt;/p&gt;
&lt;p&gt;I had already spent a few days early in August tinkering with a really tight bytecode processor that could do basic operations on the canvas and map input, and the plan was to release this little &amp;#8220;Console&amp;#8221; with a pack-in game of Breakout or something along those&amp;nbsp;lines.&lt;/p&gt;
&lt;p&gt;And for at least a few days I tinkered with the concept. It was essentially a &amp;#8216;&lt;span class="caps"&gt;CPU&lt;/span&gt;&amp;#8217; made up of complex opcodes that, instead of mapping to super low-level operations would instead map to more complicated &lt;span class="caps"&gt;JS&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; operations. Here&amp;#8217;s a simplified pseudocode&amp;nbsp;example:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// &amp;quot;Opcodes&amp;quot; are stored in 8-bit binary format, each code taking&lt;/span&gt;
&lt;span class="c1"&gt;// two bytes, and potential extra bytes depending on required&lt;/span&gt;
&lt;span class="c1"&gt;// parameters - this is handled by the opcode handlers&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`some_local_file.bin`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayBuffer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;truth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Program Counter&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Registers are not fixed, just a dumb array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;registers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// The ops the CPU can do are mapped to an array of functions&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// No Op&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Return the next instruction location &lt;/span&gt;

    &lt;span class="c1"&gt;// Cmp -- R Imm -- Takes a register index and an immediate&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GetInt16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GetInt16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;registers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;truth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Most values are 16-bit, aside from addresses&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// Je -- Imm32 -- Jump to address if Equal&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GetInt32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;truth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// DIMG -- R(idex) R(x) R(y)&lt;/span&gt;
    &lt;span class="c1"&gt;// Draw image from global spritesheet to context &lt;/span&gt;
    &lt;span class="c1"&gt;// An example of a &amp;#39;complex&amp;#39; instruction&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;registers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GetInt16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;registers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GetInt16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;registers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GetInt16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

        &lt;span class="nx"&gt;DrawSprite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;idex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// My actual solution for sprites was to use something similar to&lt;/span&gt;
        &lt;span class="c1"&gt;// the OAM Table in the NES/Famicom - a fixed array of sprite objects&lt;/span&gt;
        &lt;span class="c1"&gt;// that get automatically drawn if active, with fixed properties&lt;/span&gt;
        &lt;span class="c1"&gt;// like X,Y coordinates, Width and Height in spritesheet tiles and&lt;/span&gt;
        &lt;span class="c1"&gt;// any attributes (Like whether it&amp;#39;s flipped or rotated or not)&lt;/span&gt;
        &lt;span class="c1"&gt;// But this is just a really rough example.&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I got up to the point where I had a bunch of pixels filling the screen based on some code, but I realized that at
some point I was going to have to write an assembler or I&amp;#8217;d be entering opcodes manually for the duration of the
competition, and I wasn&amp;#8217;t really up for&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;So I cleared out the project folder, opened up Aseprite with a palette I had created for the competition, and set out
to make a &amp;#8216;complete&amp;#8217; set of art to work with.
After a bit of scribbling around, I came up with an initial sprite set (Click to&amp;nbsp;enlarge)&lt;/p&gt;
&lt;p&gt;&lt;a href="static-images/xycore/sprsheet.png" data-fancybox="gallery" data-caption="The pieces I gave myself to work with"&gt;
    &lt;img src="static-images/xycore/sprsheet.png" style="width:150px" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most of it was random doodling, but I thought that it would serve as a good basis for creating &lt;em&gt;something&lt;/em&gt; to begin&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;So with that I&amp;nbsp;began.&lt;/p&gt;
&lt;h3 id="art-style-limitations"&gt;Art Style&amp;nbsp;Limitations&lt;/h3&gt;
&lt;p&gt;From the moment I started doodling in Aseprite I had a certain set of limits in mind. The &amp;#8220;Fantasy Console&amp;#8221; I was originally planning had a custom 16-color palette, and I decided to keep that and work with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;a href="static-images/xycore/palette.png" data-fancybox="gallery" data-width="300px" data-caption="The palette"&gt;
    &lt;img src="static-images/xycore/palette.png" style="width:150px" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I sacrificed the 16th color for transparency, allowing me to utilize the natural compression you get for free with &lt;a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics#File_size_and_optimization_software"&gt;16-color &lt;span class="caps"&gt;PNG&lt;/span&gt; images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also find that working with a limited palette accelerates my workflow, as I have fewer overall design decisions to make and can&amp;#8217;t really mess around with hue and value too&amp;nbsp;much.&lt;/p&gt;
&lt;p&gt;The initial spritesheet fell in at just under 5K without any compression, which I considered good enough - my goal was to use approximately half of the available space for art, the other half for&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;I also created a font sheet to go with the game, but cut it out a couple of weeks into development because I didn&amp;#8217;t &lt;em&gt;really&lt;/em&gt; need it. Here it is for&amp;nbsp;reference!&lt;/p&gt;
&lt;p&gt;&lt;a href="static-images/xycore/fontsheet.png" data-fancybox="gallery" data-caption="The font I ended up discarding"&gt;
    &lt;img class="thumbnail" src="static-images/xycore/fontsheet.png" &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="initial-design-decisions"&gt;Initial Design&amp;nbsp;Decisions&lt;/h3&gt;
&lt;p&gt;After seeing the theme, &lt;code&gt;Back&lt;/code&gt;, and after throwing out my Fantasy Console concept, I ended up deciding on two key aspects or uses of the word &amp;#8220;Back&amp;#8221;: First as the &amp;#8220;back&amp;#8221; in &amp;#8220;throwback&amp;#8221;, and then as the &amp;#8220;back&amp;#8221; in&amp;nbsp;&amp;#8220;backtrack&amp;#8221;.&lt;/p&gt;
&lt;p&gt;My initial spritesheet also helped inform this concept, since I had a few nods to some classics in the art - and if I was going to do a game inspired by Metroid and Hero Core, I was going to end up with some natural backtracking to find new bosses, powerups and&amp;nbsp;areas!&lt;/p&gt;
&lt;p&gt;Much later on I also added in the classic &amp;#8220;Escape the self-destructing planet&amp;#8221; sequence, and that adds in a &amp;#8220;Get &lt;em&gt;back&lt;/em&gt; to your ship&amp;#8221; use of the&amp;nbsp;word.&lt;/p&gt;
&lt;p&gt;I mostly ignored any further potential theme tie-ins: I really wanted to focus on a good core gameplay experience first, and adding in gimmicks might have hurt development time, cost and&amp;nbsp;gameplay.&lt;/p&gt;
&lt;p&gt;Before beginning any actual coding, I played a bit of Hero Core again to better remember what it had going for it, and wrote down some notes on how I wanted my bosses to&amp;nbsp;behave.&lt;/p&gt;
&lt;h3 id="a-note-on-my-design-process"&gt;A note on my design&amp;nbsp;process&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ll be honest up-front and state for the record that I&amp;#8217;m a bit of a lazy designer. I don&amp;#8217;t write design docs.
I sort of grow them instead, adding and removing bits and pieces as I see the need for them and generally repeatedly asking myself &amp;#8220;What next?&amp;#8221; from a player&amp;#8217;s point of&amp;nbsp;view.&lt;/p&gt;
&lt;p&gt;I guess you could represent this design methodology as a flowchart, but that would get cumbersome. Instead, I use good old Emacs, and the magic of Org&amp;nbsp;Mode. &lt;/p&gt;
&lt;p&gt;&lt;a href="static-images/xycore/emacs_organization.png" data-fancybox="gallery" data-caption="My Org file for the game"&gt;
    &lt;img class="thumbnail" src="static-images/xycore/emacs_organization.png" &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org Mode is one of many &lt;em&gt;major modes&lt;/em&gt; that can be added to Emacs. It provides a very simple way to create interactive informational documents in a similar fashion to Markdown, except that it comes with some built in conveniences (Such as collapsing headings into folding bullets, highlighting keywords, a timestamping/timesheet feature, a full agenda mode for scheduling and too many other features that I haven&amp;#8217;t even considered using&amp;nbsp;yet).&lt;/p&gt;
&lt;p&gt;The file itself is a very simple &lt;span class="caps"&gt;ASCII&lt;/span&gt; document that looks something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEV TODO:
=========

* DONE ENVIRONMENT PROGRAMMING -
** TODO + Create subtle shifted tint for distorted area in Fire Zone
** TODO + Create some plants/decor to be randomly placed in each area
* THINGS REQUIRED -
** DONE Mini-Core - 
    Extra descriptions, code or anything can go here and be folded out of the way.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my configuration I just hit &lt;span class="caps"&gt;TAB&lt;/span&gt; to fold a region, so I can quickly add notes or even subtrees to a section and quickly jump around, add more notes, refine things, strike through cancelled features,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m using my own notation here for a lot of stuff, like the &amp;#8220;&lt;span class="caps"&gt;TODO&lt;/span&gt; +&amp;#8221; entries basically meaning &amp;#8220;For Version +1&amp;#8221;.
Prioritization is something I could have used too, but didn&amp;#8217;t really feel the need to for this&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;This document started from very humble beginnings, something along the lines&amp;nbsp;of:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEV TODO:
=========

* REQUIRED -
** Get player sprite moving on screen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it grew from there - I went through my spritesheet and added a feature in the document for each &amp;#8216;object&amp;#8217;, and wrote a little note on what it would do or be used for. If I couldn&amp;#8217;t think of something to use it for or thought it would be too time consuming or space consuming for the game, I cut it from the feature list and&amp;nbsp;continued.&lt;/p&gt;
&lt;p&gt;This ended up giving me a pretty solid foundation to work with, and a list of things to do whenever I was at a&amp;nbsp;loss.&lt;/p&gt;
&lt;h3 id="the-code"&gt;The&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;If you want to follow along with any of the code, the source is &lt;a href="https://github.com/64Mega/xycore-js13k-2019"&gt;up on&amp;nbsp;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of the game&amp;#8217;s code resides in &lt;code&gt;main.js&lt;/code&gt;, with the only dependency being &lt;code&gt;sprsheet4.png&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The other files are various&amp;nbsp;dependencies:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Filename&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;compiled.js&lt;/td&gt;
&lt;td&gt;Build artifact from Closure compiler, left in as an example&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compress.bat&lt;/td&gt;
&lt;td&gt;Lazy batch file to run the Closure compiler and pipe the output into index1.html&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index.html&lt;/td&gt;
&lt;td&gt;My &amp;#8216;development&amp;#8217; html file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index_template.html&lt;/td&gt;
&lt;td&gt;The first piece of the distributed &lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index_end.html&lt;/td&gt;
&lt;td&gt;The tail-end of the distributed &lt;span class="caps"&gt;HTML&lt;/span&gt;. In hindsight, could&amp;#8217;ve just piped a fixed value into the final &lt;span class="caps"&gt;HTML&lt;/span&gt; file&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Other files are part of the JS13k submission&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;Once built, the only files that need packing are &lt;code&gt;index1.html&lt;/code&gt; (Renamed to index.html for the js13k submission) and
&lt;code&gt;sprsheet4.png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For compression, I made use of 7zip to create the &lt;span class="caps"&gt;ZIP&lt;/span&gt; file, then further compressed down with &lt;code&gt;advzip&lt;/code&gt; and &lt;code&gt;optipng&lt;/code&gt;.
The exact commands I used are as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;optipng&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;o7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;zm1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="nx"&gt;sprsheet4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;png&lt;/span&gt;
&lt;span class="nx"&gt;advzip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt; &lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="my-tools"&gt;My&amp;nbsp;Tools&lt;/h3&gt;
&lt;p&gt;Tool choice is pretty important for JS13k. You need to be comfortable with what you&amp;#8217;re using, and it&amp;#8217;s a good idea
to have some &amp;#8216;quality of life&amp;#8217;&amp;nbsp;extras.&lt;/p&gt;
&lt;p&gt;My development environment is Windows, with three alternative ways to use Linux for any Linux-specific tools or
conveniences (Those being a &lt;span class="caps"&gt;VM&lt;/span&gt; server, &lt;span class="caps"&gt;WSL&lt;/span&gt; (Though that&amp;#8217;s a buggy mess 50% of the time) and a physical laptop that I often just leave on a shelf and run a low-profile server, accessed via &lt;span class="caps"&gt;SSH&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;My editor is Visual Studio Code for code editing, Emacs for organization (org-mode is&amp;nbsp;amazing).&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;VS&lt;/span&gt; Code has some strong benefits for me: Remote Workspaces being one of them, a feature I make use of frequently,
and the built in debug interface is &lt;em&gt;crucial&lt;/em&gt; to smooth game&amp;nbsp;debugging. &lt;/p&gt;
&lt;p&gt;Sure you can set breakpoints and such up in the Firefox/Chrome dev-tools, but &lt;span class="caps"&gt;VS&lt;/span&gt; Code&amp;#8217;s debugger will auto-focus 
on a breakpoint or exception, show a nice list of locals, the call stack and has &lt;em&gt;extra types&lt;/em&gt; of&amp;nbsp;breakpoint. &lt;/p&gt;
&lt;p&gt;Logpoints and conditional breakpoints are something you never knew you needed until you try them.
I&amp;#8217;m still lazy and tend to automatically use &lt;code&gt;console.log()&lt;/code&gt; in my code without thinking, but logpoints
are a lot cleaner and come with the benefit of not needing to tidy up your cascade of &lt;code&gt;console.log&lt;/code&gt;s after
a gruelling debug&amp;nbsp;session. &lt;/p&gt;
&lt;p&gt;Mid-competition there was an update to &lt;span class="caps"&gt;VS&lt;/span&gt; code that added Data Breakpoints - breakpoints that fire when a specific
variables changes. All of these debugging tools together help to minimize the amount of hunting you have to do
for weird bugs, and allow you to catch issues&amp;nbsp;earlier.&lt;/p&gt;
&lt;p&gt;For art I tend to always use Aseprite for my pixel art, ClipStudio &lt;span class="caps"&gt;PAINT&lt;/span&gt; for quick concept sketches or a good old piece of paper and a pencil - I always have a few pencils at hand, and a clipboard with some cheap printer paper for doodles or&amp;nbsp;notes!&lt;/p&gt;
&lt;p&gt;My build tools consisted of nothing but browser-sync - hot reloading is invaluable when you&amp;#8217;re doing rapid iteration!
My last js13k attempt involved a somewhat complicated Gulp and Webpack setup, but since I decided to work in a monolithic file - a bad idea, I know, but I managed! - I decided to rather take the path of least resistance and manually compile my game&amp;nbsp;later.&lt;/p&gt;
&lt;h3 id="level-data-storage"&gt;Level Data&amp;nbsp;Storage&lt;/h3&gt;
&lt;p&gt;Early on I made a decision to store my levels as image data. I&amp;#8217;d done this for my previous JS13k entry, and it was
fairly successful if a bit cumbersome. But it compresses way better than an inline array, and didn&amp;#8217;t require too much code to get working. There was one caveat that I&amp;#8217;ll bring up later, but suffice it to say that it &lt;em&gt;works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The map looks like this in its current form:
&lt;a href="static-images/xycore/map.png" data-fancybox="gallery" data-caption="The game's map"&gt;
    &lt;img class="thumbnail" src="static-images/xycore/map.png"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The way this works is that in the game&amp;#8217;s code I have an array of 16 &lt;span class="caps"&gt;RGB&lt;/span&gt; values, each one representing a color in my palette. I read the map image in, copy it to an &lt;code&gt;ImageData&lt;/code&gt; buffer and read each pixel in the map, comparing it to the palette and pushing the returned palette index into a &lt;code&gt;map[]&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;Each palette index has a &amp;#8216;meaning&amp;#8217; to the game: White is walls, transparent (Black areas in this screenshot) is empty space, the one shade of red is enemies, another bosses, dark red doors,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;Eventually I merged the spritesheet and map into a single file to help reduce &lt;span class="caps"&gt;ZIP&lt;/span&gt; file&amp;nbsp;overhead.&lt;/p&gt;
&lt;p&gt;In hindsight, I could&amp;#8217;ve implemented a really simple in-game map using this! Just render a piece of the map based on where the player&amp;#8217;s screen coordinates are, and only render doors and walls.
That said, I didn&amp;#8217;t really have much screen space to work with, given my next&amp;nbsp;limitation.&lt;/p&gt;
&lt;h3 id="the-canvas"&gt;The&amp;nbsp;Canvas&lt;/h3&gt;
&lt;p&gt;As a sort of holdover from the original Fantasy Console idea, I decided to limit my canvas resolution to 128x128 pixels. This not only meant I didn&amp;#8217;t have to worry about performance as much, but meant I didn&amp;#8217;t need large sprites to provide a decently &amp;#8220;busy&amp;#8221; looking game&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;This also made map editing easier, since each 16x16 grid cell in Aseprite corresponds with a single&amp;nbsp;room.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://github.com/64Mega/xycore-js13k-2019/blob/master/index.html"&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/a&gt; there&amp;#8217;s a bit of inline css to position the canvas on-screen as part of page layout, instead of trying to fiddle with it from the JavaScript side,
as well as enable &amp;#8220;Crisp Scaling&amp;#8221; on the canvas so that the pixel art looked&amp;nbsp;sharp.&lt;/p&gt;
&lt;p&gt;Here it is in expanded&amp;nbsp;form:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;/* This sets up a nice uniform area to put the canvas &lt;/span&gt;
&lt;span class="c"&gt;            in and &amp;#39;letterboxes&amp;#39; the sides */&lt;/span&gt;
        &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;pixelated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="n"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;crisp-edges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;128&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;128&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I decided right at the beginning that this &lt;span class="caps"&gt;DOM&lt;/span&gt; configuration was &lt;em&gt;vital&lt;/em&gt; to the game&amp;#8217;s presentation. I demand crispy pixels and proper&amp;nbsp;framing!&lt;/p&gt;
&lt;h3 id="code-organization"&gt;Code&amp;nbsp;Organization&lt;/h3&gt;
&lt;p&gt;Brace yourself, &lt;a href="https://github.com/64Mega/xycore-js13k-2019/blob/master/main.js"&gt;&lt;code&gt;main.js&lt;/code&gt;&lt;/a&gt; contains the entire game. It&amp;#8217;s somewhere between 1000-1500 lines of actual&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Before submitting I went over it and tried to comment things as I remembered their purpose, so there &lt;em&gt;is&lt;/em&gt; some useful commentary, but there&amp;#8217;s a lot of weird code, some areas where I tried some silly things and even entire sections of dead code. Not too many, but they&amp;#8217;re&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Now as for &lt;em&gt;why&lt;/em&gt; everything is in one giant source file, it&amp;#8217;s because I was feeling somewhat lazy this year and didn&amp;#8217;t feel like setting up a bundler this year. For JS13k 2017 I used an overcomplicated build setup involving Webpack and Gulp. Next year, I&amp;#8217;m likely to try getting a Parcel workflow working - Parcel is my go-to for any other web projects I work on, but this year laziness won&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;I did divide the source into four distinct areas: Global variable declarations, Function declarations, Initialization and Game&amp;nbsp;Loop.&lt;/p&gt;
&lt;p&gt;Normally writing everything in one giant file like this would prove a major headache, but I make pretty heavy use of a Bookmark extension for &lt;span class="caps"&gt;VS&lt;/span&gt; Code that lets me keep things in relative order.
That said, having some things in their own separate files would&amp;#8217;ve made things a lot easier in the long run. But I knew what I was signing myself up&amp;nbsp;for!&lt;/p&gt;
&lt;h2 id="development-process"&gt;Development&amp;nbsp;Process&lt;/h2&gt;
&lt;p&gt;The first thing I did once my spritesheet was created was get the player sprite onto the screen and rendered. The second thing I did was to implement a better general-purpose sprite drawing function that could rotate and scale sprites - I used this to flip and rotate sprites, which allowed a lot of sprite reuse later&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;I also created a function to create sprite objects that contained the relevant data for a sprite&amp;#8217;s frames and size, with defaults. This is what it looks like (with&amp;nbsp;formatting):&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;SpriteID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numframes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From there, I went on and created a separate function for drawing tiles. The tile function takes an array of indexes into the spritesheet, and chooses the subtile to use based on a combination of the X and Y position the tile is drawn. This gives a bit of pseudorandom variation to the&amp;nbsp;tiles.&lt;/p&gt;
&lt;h3 id="game-progression"&gt;Game&amp;nbsp;Progression&lt;/h3&gt;
&lt;p&gt;After I had something moving around on my screen and a few rooms to move around in, I started thinking about
what I&amp;#8217;d like to make with&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;I decided to keep player mechanics as simple as possible: Free-movement with a &amp;#8216;shoot&amp;#8217; button. This meant I could immediately shift focus to the&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;The first thing I did was split the map into five distinct areas. Each of the four quadrants of the map make up an area, with the tiles that meet in the center being &amp;#8220;Area&amp;nbsp;0&amp;#8221;.&lt;/p&gt;
&lt;p&gt;It was around this time that, one evening, I started tinkering with some raster effects and created the water effect that&amp;#8217;s found in the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://thumbs.gfycat.com/ColorlessCleverCod-size_restricted.gif" data-fancybox="gallery" data-caption="The water effect"&gt;
    &lt;img src="https://thumbs.gfycat.com/ColorlessCleverCod-small.gif" &gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My first solution to achieve this involved drawing a copy of the canvas into an &lt;code&gt;ImageData&lt;/code&gt; buffer. This is the original&amp;nbsp;code:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ibuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;canvasDimensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;distrow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;distortion&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sintimer&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Really redundant&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Get offset into buffer. Same as y*(width*4) + (x*4)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;ibuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idex&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ibuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idex&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;ap&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;ibuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;idex&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Set alpha to full value&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// My screenshake was also baked into this area of the code.&lt;/span&gt;
&lt;span class="c1"&gt;// msin and mcos are defined just before the loop, based on global sintimer.&lt;/span&gt;

&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ibuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// I use ternary expressions a lot.&lt;/span&gt;
    &lt;span class="nx"&gt;screenShake&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;globalclock&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
        &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;msin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;msin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nx"&gt;screenShake&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;globalclock&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
        &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;mcos&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;mcos&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Later on I discovered that this was a serious performance bottleneck: &lt;code&gt;Context.getImageData()&lt;/code&gt; is just too&amp;nbsp;slow.&lt;/p&gt;
&lt;p&gt;So I created a faster solution that uses a buffer canvas and redraws slices of the main canvas to an offset. That looks something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// cbuffercontext is a &amp;quot;copy buffer&amp;quot; defined near the top of the file next to the primary &lt;/span&gt;
&lt;span class="c1"&gt;// canvas/context. Here we&amp;#39;re clearing and copying the contents of the primary buffer to it.&lt;/span&gt;

&lt;span class="nx"&gt;cbuffercontext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;canvasDimensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;cbufferContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// In case you&amp;#39;re wondering, distrow is the row on-screen where the water effec starts,&lt;/span&gt;
&lt;span class="c1"&gt;// defaulting to 0 (Whole screen). This is used to render partial water in some rooms &lt;/span&gt;
&lt;span class="c1"&gt;// without too much special logic.&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;distrow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;distortion&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sintimer&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Clear a line of the buffer&lt;/span&gt;

    &lt;span class="nx"&gt;cbuffercontext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

    &lt;span class="c1"&gt;// Draw an offset slice. &lt;/span&gt;
    &lt;span class="c1"&gt;// We only ever draw at 0 or -1, otherwise the effect is too pronounced&lt;/span&gt;

    &lt;span class="nx"&gt;cbuffercontext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Copy the copy-buffer back to the main canvas&lt;/span&gt;
&lt;span class="c1"&gt;// We clear the main canvas first, since black pixels are actually just transparent pixels.&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;canvasDimensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// xoff and yoff are the screenshake offsets in this version&lt;/span&gt;
&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cbuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;xoff&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;yoff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At first I thought this would be a colossal waste of space, but it really grew on me, and I think it adds a lot of visual style to the game - so I kept&amp;nbsp;it!&lt;/p&gt;
&lt;h3 id="a-bit-of-juice"&gt;A bit of&amp;nbsp;&amp;#8220;Juice&amp;#8221;&lt;/h3&gt;
&lt;p&gt;While I was testing my game, I noticed that there was a lack of &lt;em&gt;impact&lt;/em&gt;. Something should happen when a bullet hits something, or when the player takes damage. Something other than the sprite flickering or a dispersion effect&amp;nbsp;spawning.&lt;/p&gt;
&lt;p&gt;I added a &lt;em&gt;really&lt;/em&gt; simple screen shake system that shakes more and longer the higher the variable that controls the shaking is. I added it to &lt;em&gt;everything&lt;/em&gt; I could think of, and it definitely made the game feel punchier almost&amp;nbsp;immediately.&lt;/p&gt;
&lt;p&gt;The code for this is somewhat simplistic and also not entirely well implemented: The amplitude of the shake is a function of the duration of the shake. I have &lt;em&gt;no&lt;/em&gt; idea what my thought process behind this was, but it means that a higher duration screenshake shakes the screen to a stupid&amp;nbsp;degree.&lt;/p&gt;
&lt;p&gt;The code that does this is as follows (From Line 1705 in the&amp;nbsp;source)&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sintimer&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Simple sine and cosine values for variaton&lt;/span&gt;
    &lt;span class="nx"&gt;mcos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sintimer&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Screenshake calculations - scales the screenshake timer by the given&lt;/span&gt;
    &lt;span class="c1"&gt;// sine/cosine value and then again by the direction.&lt;/span&gt;
    &lt;span class="nx"&gt;xoff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;globalclock&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;msin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;msin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;yoff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;globalclock&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;mcos&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;mcos&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;screenShake&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you feel like playing around with this and seeing how bad high screenshake values can really get, try modifying the screenshake value for something silly like bullet impacts to something like 32 and watch the world shake itself&amp;nbsp;apart!&lt;/p&gt;
&lt;h3 id="the-bosses"&gt;The&amp;nbsp;Bosses&lt;/h3&gt;
&lt;h4 id="the-magma-centipede-boss"&gt;The &amp;#8220;Magma Centipede&amp;#8221;&amp;nbsp;boss&lt;/h4&gt;
&lt;p&gt;After I created my four visual areas I decided I wanted to create four bosses based on the sprites I&amp;#8217;d already made.
I began with the most difficult one, the Magma&amp;nbsp;Centipede/Worm.&lt;/p&gt;
&lt;p&gt;Before creating the player code I had already experimented with creating a segmented enemy that drew multiple
body parts as a &amp;#8216;line&amp;#8217; of segments. With a bit of tweaking I managed to get it to wriggle menacingly from the
right-hand-side of the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;In steps, I added more &amp;#8216;life&amp;#8217; to it, beginning with the ability to damage the player if touching. Then I made it take damage from the player&amp;#8217;s&amp;nbsp;weapon.&lt;/p&gt;
&lt;p&gt;And at that point I decided I wanted a simple state machine. My implementation for all four bosses involves a large &lt;code&gt;switch&lt;/code&gt; statement that checks a variable named &lt;code&gt;bossPhase&lt;/code&gt;. The currently spawned boss has a data object that contains some common boss variables as well as some unique values, e.g.: the fire boss has a &lt;code&gt;segs&lt;/code&gt; variable to represent the number of segments&amp;nbsp;remaining.&lt;/p&gt;
&lt;p&gt;From this point I started scripting the boss stage by stage. The first thing I made it do was appear from off-screen. This was a simple check against a variable holding the X value. Once it hit that value, it&amp;#8217;s off to the next &amp;#8216;phase&amp;#8217; of the&amp;nbsp;behavior.&lt;/p&gt;
&lt;p&gt;Next I made it quickly disappear off screen when you took out one of its health bars, and return again with one a segment&amp;nbsp;removed.&lt;/p&gt;
&lt;p&gt;Then I decided to mess around and made the fire-wave. That was a lot of fun to make, but is also some of the messiest code in the file! It&amp;#8217;s basically a super-long array of X and Y coordinates, and the boss loops through each of them
decrementing the X value and assigning the Y value as a function of a sinewave based on that X&amp;nbsp;value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It was around this point that I gave the Closure compiler a try, and was pleasantly surprised when I found that I was only using 7.5k or so. I realized that with a bit of work I could add some interesting behaviors to my bosses, and make them a centerpiece for the&amp;nbsp;game.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="the-venus-flytrap-boss"&gt;The &amp;#8220;Venus Flytrap&amp;#8221;&amp;nbsp;boss&lt;/h4&gt;
&lt;p&gt;The next boss I tackled was the Unnamed Plant Boss/Venus Flytrap. I had already decided a few days before implementing this one that I wanted it to be a &amp;#8216;simple&amp;#8217; dodge phase, defense phase and damage phase: Dodge the bullet pods, destroy the vines, attack the center, repeat for another two waves.
I was planning on saving the more &amp;#8216;complex&amp;#8217; behaviors for the last&amp;nbsp;boss.&lt;/p&gt;
&lt;p&gt;A key addition to my implementation here was the creation of a &lt;code&gt;playerHurt&lt;/code&gt; function that enemies an bosses could call to damage the player, as well as a &lt;code&gt;playerProjectileTest&lt;/code&gt; function that would loop through the active player projectiles and apply a basic &lt;span class="caps"&gt;AABB&lt;/span&gt; test to them, running a callback if a collision was&amp;nbsp;happening.&lt;/p&gt;
&lt;p&gt;The damage the vines inflict was implemented using a manual &lt;span class="caps"&gt;AABB&lt;/span&gt; test against the player coordinates, and would &amp;#8216;bump&amp;#8217; the player to the left or right depending on which side of the screen they were&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;The final phase is the &amp;#8220;free damage&amp;#8221; state: You have as much time as you want to spam bullets at the plant bulb and get rid of an &lt;span class="caps"&gt;HP&lt;/span&gt;&amp;nbsp;bar.&lt;/p&gt;
&lt;h4 id="the-mother-brain-boss"&gt;The &amp;#8220;Mother Brain&amp;#8221;&amp;nbsp;boss&lt;/h4&gt;
&lt;p&gt;This boss was a pretty simple one too, because I was getting nervous as I crept closer to the 10k mark, and I wanted space to add extra enemies, weapon powerups and suit&amp;nbsp;upgrades&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Up to this point the weapon upgrades were automatically granted as soon as you destroyed a boss. This worked, but having an actual item to pick up after the boss room feels much more&amp;nbsp;rewarding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly to the Flytrap, I decided to have some sort of barrier to take down, so I started with a nod to the barriers in the original Metroid game when fighting Mother&amp;nbsp;Brain.&lt;/p&gt;
&lt;p&gt;But barriers alone made for a boring and completely benign boss battle, so I &amp;#8220;temporarily&amp;#8221; added in a bunch of enemy spawners along the top and bottom of the central&amp;nbsp;corridor.&lt;/p&gt;
&lt;p&gt;I decided to keep them, in the end, they added a somewhat random element to the boss, since anything could technically&amp;nbsp;spawn.&lt;/p&gt;
&lt;p&gt;After taking down the first &lt;span class="caps"&gt;HP&lt;/span&gt; bar, the brain spawns in four turrets with projectiles that fire towards the player&amp;#8217;s position. This adds a bit of required dodging, but isn&amp;#8217;t too hard to get through. Originally I was going to spawn another wave of these, but I decided not to in the final game because this was going to be the first battle the player would&amp;nbsp;have.&lt;/p&gt;
&lt;h4 id="the-tank-boss"&gt;The &amp;#8220;Tank&amp;#8221;&amp;nbsp;Boss&lt;/h4&gt;
&lt;p&gt;I took on this boss pretty close to the end of development, after I&amp;#8217;d already added in a bunch of things like the health and suit upgrades, so I decided to go &amp;#8220;all out&amp;#8221; with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Initially I just did slow linear movement from side-to-side, but I decided that didn&amp;#8217;t have enough impact. So I went and added a simple &lt;code&gt;lerp&lt;/code&gt; and quadratic easing function to the game. Still not feeling the impact enough, I added screenshake every time the boss &amp;#8216;stopped&amp;#8217;. This added a bit of punch to the&amp;nbsp;fight.&lt;/p&gt;
&lt;p&gt;The drop-down from the ceiling was intended to give the player a window of opportunity to mash the fire button at the boss for a bit, but not for free - it was a bit too easy, so I added a wave of those tracking projectiles to this portion of the&amp;nbsp;fight.&lt;/p&gt;
&lt;p&gt;Originally the fight drastically sped up as you got through the health bars, but I toned it down a bit. Even I was having trouble getting through it, and I made the&amp;nbsp;game!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On that note, it &lt;em&gt;is&lt;/em&gt; possible to defeat this boss without any weapon, suit or health upgrades. While debugging I did that several times, though it&amp;#8217;s pretty tough. In normal gameplay you can&amp;#8217;t encounter the boss without the third weapon upgrade, but you &lt;em&gt;can&lt;/em&gt; intentionally downgrade using the &lt;span class="caps"&gt;JS&lt;/span&gt; console by entering &lt;code&gt;playerWeapon = 0&lt;/code&gt;, if you&amp;#8217;d like to challenge yourself - but only if running the unobfuscated version of the game. I have &lt;em&gt;no&lt;/em&gt; idea what the variable name is once it&amp;#8217;s&amp;nbsp;minified!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="an-audio-experiment"&gt;An Audio&amp;nbsp;Experiment&lt;/h3&gt;
&lt;p&gt;At some point during week 2 I had this harebrained notion to add sound to my game. I had already &lt;em&gt;firmly&lt;/em&gt; decided at the start of the competition that I knew nothing about the Browser Audio APIs and that it&amp;#8217;d be best left until next&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;My brain beyond &lt;span class="caps"&gt;11PM&lt;/span&gt; doesn&amp;#8217;t care for my resolve. I cracked open &lt;span class="caps"&gt;MDN&lt;/span&gt;&amp;#8217;s docs on the &lt;span class="caps"&gt;API&lt;/span&gt;, picked out the squarewave oscillator and created a really simple sound&amp;nbsp;player.&lt;/p&gt;
&lt;p&gt;It consists of three parts: An oscillator node, a gain node and a function that feeds the&amp;nbsp;oscillator.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;beep&lt;/code&gt; function takes as its argument an array of arrays. Each sub-array needs two values: A frequency and a duration.
The function recursively consumes the array until done, setting the gain to a non-ear-destroying level upon starting a new note and setting it back to zero when ending a&amp;nbsp;note.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the &lt;em&gt;entirety&lt;/em&gt; of the audio&amp;nbsp;code:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AudioContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;osc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOscillator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createGain&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;osc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;square&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;osc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;osc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;beep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// Current frequency/duration pair&lt;/span&gt;
    &lt;span class="nx"&gt;osc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frequency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setValueAtTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.04&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;osc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frequency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Helps prevent clipping&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;beep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Making the most of JS APIs!&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Add a small offset to the duration to compensate for&lt;/span&gt;
                &lt;span class="c1"&gt;// Firefox having some trouble with shorter durations.&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;#8217;s an example sound, the &amp;#8220;Pickup&amp;#8221;&amp;nbsp;sound:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sndPickup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;523&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;466&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;311&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;261&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;523&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="mi"&gt;1047&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I created these sounds by ear using a note frequency chart and rounding the figures to the nearest integer. It worked out pretty &lt;span class="caps"&gt;OK&lt;/span&gt;, and the sounds are somewhat reminiscent of early &lt;span class="caps"&gt;DOS&lt;/span&gt; and arcade&amp;nbsp;games.&lt;/p&gt;
&lt;h3 id="the-save-system"&gt;The Save&amp;nbsp;System&lt;/h3&gt;
&lt;p&gt;This is another feature that I didn&amp;#8217;t think I would be able to add, but after looking into it, was actually really&amp;nbsp;straightforward.&lt;/p&gt;
&lt;p&gt;I opted to use the &lt;code&gt;sessionStorage&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt; as opposed to the &lt;code&gt;localStorage&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt; since access control to the former is less restricted. This means that the game retains your progress so long as you have the tab open. Reloading, even hard-reloading, will keep your save data intact. To start a new game you&amp;#8217;d have to close the tab and reopen&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;One little bug I ran into while working with &lt;code&gt;sessionStorage&lt;/code&gt; is that the &lt;code&gt;getItem&lt;/code&gt; method always returns a string, no matter what you stored to begin with, and I wasn&amp;#8217;t taking that into account. 
I eventually went back over my code and, for every instance I was using it, coerced the returned value into a number like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That &lt;code&gt;retrieve&lt;/code&gt; function was an attempt on my part to reduce the byte footprint of the sessionStorage calls. The compiler can&amp;#8217;t minify the names of global &lt;span class="caps"&gt;API&lt;/span&gt; objects or their methods, so I tried to&amp;nbsp;delegate.&lt;/p&gt;
&lt;p&gt;The compiler &amp;#8216;helpfully&amp;#8217; optimized my delegation out, replacing each instance of &lt;code&gt;retrieve&lt;/code&gt; and its counterpart &lt;code&gt;store&lt;/code&gt; with the full-length &lt;code&gt;sessionStorage.getItem&lt;/code&gt; and &lt;code&gt;sessionStorage.setItem&lt;/code&gt;. Before submitting I manually re-added the delegate functions and did a search/replace over the minified code to save some&amp;nbsp;space.&lt;/p&gt;
&lt;p&gt;On death, the last save is &amp;#8216;loaded&amp;#8217; by reloading the window, which makes for a nice and neat reinitialization of the global state. The reload is achieved with this odd&amp;nbsp;assignment:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="player-progression"&gt;Player&amp;nbsp;Progression&lt;/h3&gt;
&lt;p&gt;When I began work on the spritesheet, I started off &lt;em&gt;really&lt;/em&gt; simple. Initially I was going to limit sprites to one color to keep with the Hero Core inspiration, but with a more &lt;span class="caps"&gt;ZX&lt;/span&gt; Spectrum style. Then I started listening to some music and before I knew it I had revised the spritesheet with a much higher per-sprite color count. It definitely made the sprites more&amp;nbsp;vibrant!&lt;/p&gt;
&lt;p&gt;That was when I started adding door sprites, different weapons and different suit colors, and basically the game I was planning turned into a&amp;nbsp;micro-Metroidvania!&lt;/p&gt;
&lt;p&gt;For the majority of the project&amp;#8217;s development I wasn&amp;#8217;t sure I&amp;#8217;d be able to fit any of the desired features in, so I left the bulk of them alone until after I implemented what I saw as the game&amp;#8217;s &amp;#8220;heart&amp;#8221;, those being the boss&amp;nbsp;encounters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are still quite a few potential objects and obstacles left out of the final competition version of the&amp;nbsp;game:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Electric barriers, meant to be brought down by fighting a mini-boss (Similarly to Hero&amp;nbsp;Core)&lt;/li&gt;
&lt;li&gt;Switches that could open doors in other rooms, perhaps with a time&amp;nbsp;limit&lt;/li&gt;
&lt;li&gt;Switchable weapons and ammo for each&amp;nbsp;weapon&lt;/li&gt;
&lt;li&gt;Touch-screen dpad icons (I did implement that, but it was a bit of a big feature so I cut it for space&amp;nbsp;reasons)&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Crystals&amp;#8221; that were supposed to be in the rooms after a boss. You&amp;#8217;d destroy them to open the shell around the reactor in the center of the game&amp;nbsp;world.&lt;/li&gt;
&lt;li&gt;Spikes! Not of the instant-death variety, but damaging with a bit of&amp;nbsp;knockback.&lt;/li&gt;
&lt;li&gt;Magma! Originally intended for the lower-right corner of the&amp;nbsp;map.&lt;/li&gt;
&lt;li&gt;Crusher traps! These would come down from the ceiling or up from the floor and cause major damage if the player got caught between&amp;nbsp;them.&lt;/li&gt;
&lt;li&gt;Quick Man lasers! Not instant-death though, but I ended up recycling the art for the fourth&amp;nbsp;boss.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I might implement some of these if I get around to implementing a &amp;#8220;Version 1.1&amp;#8221; of the&amp;nbsp;game.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once I was done with them, I added in the &amp;#8216;bonus&amp;#8217; features I really wanted: barrier doors, optional health upgrades, suit upgrades and enemy&amp;nbsp;variety.&lt;/p&gt;
&lt;h4 id="player-weapons"&gt;Player&amp;nbsp;Weapons&lt;/h4&gt;
&lt;p&gt;At the start of the game the intent was for the player to only have four weapons. The pea-shooter, laser rifle, plasma cannon and rocket launcher, in that&amp;nbsp;order.&lt;/p&gt;
&lt;p&gt;Earlier in the boss implementation section I mentioned that the bosses originally granted a weapon upgrade when defeated. During testing I often set my weapon level to 3 so I could burst down phases I&amp;#8217;d already tested, but this had the side-effect of crashing the game when the level raised to 4 after defeating the&amp;nbsp;boss!&lt;/p&gt;
&lt;p&gt;So my quick-n-dirty solution was to add a special &amp;#8216;5th&amp;#8217; weapon that you get after defeating the final boss, which is a simple reuse of the plasma explosion effect. A &amp;#8220;hyper beam&amp;#8221;, basically. Completely useless by that point in the game, but satisfying to&amp;nbsp;obtain!&lt;/p&gt;
&lt;h4 id="barrier-doors"&gt;Barrier&amp;nbsp;Doors&lt;/h4&gt;
&lt;p&gt;This one was a no-brainer to me. I had (initially) four weapons, and I thought that it&amp;#8217;d be nice to have a barrier for each&amp;nbsp;type. &lt;/p&gt;
&lt;p&gt;Implementation-wise these are basically just in-world collision checks that stop the player from moving through them and will explode on contact with the right level of&amp;nbsp;projectile.&lt;/p&gt;
&lt;p&gt;Placement of these was a little tricky - I only had 16 colors to work with on the map, and I was quickly running out. So I pulled a bit of modulo trickery that essentially boils down to&amp;nbsp;this:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;spawnDoor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where the third argument is the &amp;#8216;type&amp;#8217; of door, and the variables &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; are the tile coordinates of the door.
This did mean that placement was a little bit tricky, but it worked out in the end: I only had to use one map color to place the&amp;nbsp;doors!&lt;/p&gt;
&lt;h4 id="health-upgrades"&gt;Health&amp;nbsp;Upgrades&lt;/h4&gt;
&lt;p&gt;This was a bit of a no-brainer. I originally started out designing the game around a maximum of 6 health, but then as I started adding in enemies and more complicated bosses I found that the friends helping me test the game were having quite a bit of&amp;nbsp;trouble.&lt;/p&gt;
&lt;p&gt;Each health upgrade adds two to the player&amp;#8217;s maximum health, and persists for the current game session. There are a total of four to find, and getting them all makes the game significantly&amp;nbsp;easier.&lt;/p&gt;
&lt;h4 id="armor-upgrades"&gt;Armor&amp;nbsp;Upgrades&lt;/h4&gt;
&lt;p&gt;For those who like to 100% things, and for those still having trouble with some of the bosses, I added in armor upgrades at the last moment. At first these were going to be traversal enablers. For example, you&amp;#8217;d be unable to enter water without the first tier of upgrade, and the fire zone would damage you until you got the second&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;I scrapped that concept relatively quickly, since there were already barriers in the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;I later decided to use the assets, but made them behave as a damage modifier: Each upgrade reduces damage taken by 25%, for a total of 50% damage reduction if you collect both upgrades. This also makes the game a lot easier, but they&amp;#8217;re satisfying to&amp;nbsp;collect.&lt;/p&gt;
&lt;h4 id="enemy-variety"&gt;Enemy&amp;nbsp;Variety&lt;/h4&gt;
&lt;p&gt;During almost 90% of the project&amp;#8217;s development I only had two types of static turret enemy. One would shoot straight ahead from whatever surface it was spawned on, the other would shoot diagonally in the direction of the&amp;nbsp;player.&lt;/p&gt;
&lt;p&gt;After I&amp;#8217;d populated the game&amp;#8217;s map a bit, this felt really bland. I was at the 12k mark already when I hit this point, but I managed to squeeze some really simple extra enemy behaviors in at the last minute - a &amp;#8220;rover&amp;#8221; enemy that moved left/right or up/down between walls, a static enemy that burst into a ring of projectiles when destroyed and a special turret that shoots tracking&amp;nbsp;projectiles.&lt;/p&gt;
&lt;p&gt;Even this handful of extra enemy types adds a lot more variety to the game&amp;#8217;s areas, and given the way the respawn feature works, you can sometimes reroll into some really challenging&amp;nbsp;rooms!&lt;/p&gt;
&lt;h3 id="ending-and-escape-sequence"&gt;Ending and Escape&amp;nbsp;Sequence&lt;/h3&gt;
&lt;p&gt;The final sequence of the game was a really late addition. I didn&amp;#8217;t think I&amp;#8217;d have space for anything too fancy (And I was mostly right), but given that I had a few hundred bytes to spare I decided to add a win screen and an escape&amp;nbsp;sequence.&lt;/p&gt;
&lt;p&gt;Originally the escape sequence was going to have a timer, but I found that given the limits to what I could do with regards to making a complex escape route, it wasn&amp;#8217;t worth the implementation - instead I chose to create a sense of tension with the screenshake and explosions, so it &lt;em&gt;seems&lt;/em&gt; like there&amp;#8217;s an urgency to escaping, and so that the end screen feels a bit more rewarding than simply flashing up the second you destroy the&amp;nbsp;reactor.&lt;/p&gt;
&lt;p&gt;If I&amp;#8217;d had a bit more space to work with (And some more available map colors) I would have liked to have implemented an idea I had fairly early on: Block up some passageways and open up others so the player has to escape through areas they&amp;#8217;ve already been through a new route - maybe something for the post competition&amp;nbsp;version?&lt;/p&gt;
&lt;h3 id="the-canvas-flip-bug"&gt;The Canvas Flip&amp;nbsp;Bug&lt;/h3&gt;
&lt;p&gt;I had a mild panic a few days before submission when I discovered that, seemingly at random, the canvas was flipping itself upside down. After a bit of digging, I discovered it wasn&amp;#8217;t anything to do with the game but was a strange behaviour introduced into a specific version of Chromium that most Chromium based browsers are currently&amp;nbsp;using.&lt;/p&gt;
&lt;p&gt;Whenever the tab loses focus (e.g.: The window gets minimized or you switch to another tab and back again), the canvas would flip and remain flipped until&amp;nbsp;reloading.&lt;/p&gt;
&lt;p&gt;I confirmed that it wasn&amp;#8217;t &amp;#8220;just me&amp;#8221;, and have been finding it happening on any entry that utilizies the 2D render context (WebGL contexts seem immune to the&amp;nbsp;problem).&lt;/p&gt;
&lt;p&gt;A friend of mine who was helping playtest the game just before submission intentionally flipped the canvas and played the game in &amp;#8220;Mirror mode&amp;#8221;, as he called it. Successfully too, I might add. So I labeled it a &amp;#8216;buggy feature&amp;#8217; and submitted the&amp;nbsp;game.&lt;/p&gt;
&lt;h3 id="submission"&gt;Submission&lt;/h3&gt;
&lt;p&gt;I made a point of making use of the &lt;a href="https://github.com/js13kGames/bot/blob/master/doc/how-to-submit.md#how-to-submit"&gt;new submission &lt;span class="caps"&gt;PR&lt;/span&gt; bot&lt;/a&gt; provided for this year&amp;#8217;s competition. It made submission a lot easier, and pointed out a really dumb mistake I&amp;#8217;d made (Forgot to rename &lt;code&gt;index1.html&lt;/code&gt; in the distributed zip to &lt;code&gt;index.html&lt;/code&gt;!).&lt;/p&gt;
&lt;p&gt;I actually submitted my game nearly a full week before the deadline: I&amp;#8217;d basically run out of space and had actually accomplished my design goals for once - I&amp;#8217;m used to overscoping and cutting features like crazy before&amp;nbsp;submitting!&lt;/p&gt;
&lt;p&gt;That said, after submission I encountered two unexpected bugs! Let&amp;#8217;s go over&amp;nbsp;them.&lt;/p&gt;
&lt;h4 id="bug-1-monitor-sync-rate"&gt;Bug #1 - Monitor Sync&amp;nbsp;Rate&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt; is a pretty handy browser function. And I&amp;#8217;d always (naively) assumed it was going to try to give me a constant &amp;#8216;animation&amp;#8217; tick, that tick being roughly every 16ms or so. 60 frames per&amp;nbsp;second.&lt;/p&gt;
&lt;p&gt;And I had no reason to believe otherwise! It works like that on all my devices! 
So I treated updates as fixed-increment and used fixed values everywhere - a very bad idea, as it always is, because when a friend of mine tried it on his 120hz monitor, the game predictably ran twice as&amp;nbsp;fast!&lt;/p&gt;
&lt;p&gt;I quickly implemented a traditional fixed timestep, which only took about seven lines of code total, and submitted a patch to the competition&amp;nbsp;organizers. &lt;/p&gt;
&lt;p&gt;For those interested, my implementation of the timestep (Patched together after a hasty reading-up of a bunch of articles and StackOverflow answers) looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// globals:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;frameStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;frameDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;frameTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;FPS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// At top of update function:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;frameStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frameTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// To &amp;#39;skip&amp;#39; frames if we accumulate too much frame time&lt;/span&gt;
    &lt;span class="nx"&gt;frameDelta&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frameDelta&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;frameTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Do Update Code here&lt;/span&gt;
        &lt;span class="nx"&gt;frameDelta&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;frameTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;frameStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this is a &lt;em&gt;fixed&lt;/em&gt; timestep, as opposed to the &lt;em&gt;variable&lt;/em&gt; timestep used in a lot of 3D engines (In those you tend to scale your movement by the delta time). This gives me the expected &lt;span class="caps"&gt;60FPS&lt;/span&gt; if it&amp;#8217;s achievable on the current hardware, and means I can get away with not having to touch my movement&amp;nbsp;code.&lt;/p&gt;
&lt;h4 id="bug-2-color-profiles"&gt;Bug #2 - Color&amp;nbsp;Profiles&lt;/h4&gt;
&lt;p&gt;Credit to &lt;a href="https://twitter.com/sirXemic"&gt;SirXemic&lt;/a&gt; for finding this one and contacting me with a fix.
You should go try out his entry to the competition, &lt;a href="https://js13kgames.com/entries/sentetrox"&gt;SenTetrox&lt;/a&gt;, which is best described as Tetris with a really fun twist! Go give it a&amp;nbsp;play!&lt;/p&gt;
&lt;p&gt;This bug is a little bit more obscure, but it&amp;#8217;s related to how I&amp;#8217;m generating my map: I&amp;#8217;m reading in pixels from my spritesheet and comparing them against exact &lt;span class="caps"&gt;RGB&lt;/span&gt; values in an&amp;nbsp;array.&lt;/p&gt;
&lt;p&gt;What I failed to take into account was the &lt;em&gt;color profile&lt;/em&gt; of the player&amp;#8217;s monitor. If an image has no attached color profile, the browser will convert it on the fly to the user&amp;#8217;s color profile, using what I&amp;#8217;m assuming is a perceptive conversion - this means that while the colors will appear to look the same or similar-enough, the exact &lt;span class="caps"&gt;RGB&lt;/span&gt; values are&amp;nbsp;different.&lt;/p&gt;
&lt;p&gt;I use Aseprite for all of my pixel art, and in this case in particular I was working with indexed &lt;span class="caps"&gt;PNG&lt;/span&gt; images. Because I hadn&amp;#8217;t set my defaults up for sRGB, it saved the images without a color&amp;nbsp;profile!&lt;/p&gt;
&lt;p&gt;The game still worked on the majority of systems, but for anybody using a monitor with a different color profile, the game would be unable to load, as the map pixels wouldn&amp;#8217;t match any of the&amp;nbsp;palette-data.&lt;/p&gt;
&lt;p&gt;This was a simple fix, as I just opened the spritesheet in Krita and converted to the sRGB color profile while choosing to use &lt;em&gt;absolute&lt;/em&gt; mode instead of &lt;em&gt;perceptive&lt;/em&gt; mode. Simple, but it stands as a good example of bugs that can easily fly under the&amp;nbsp;radar.&lt;/p&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ll sum things up here in the traditional postmortem format, to round things&amp;nbsp;off!&lt;/p&gt;
&lt;h4 id="what-went-right"&gt;What Went&amp;nbsp;Right&lt;/h4&gt;
&lt;p&gt;Having a clear idea of what I was making meant I knew exactly what I needed to do at each step to get to the core of the game I&amp;nbsp;wanted.&lt;/p&gt;
&lt;p&gt;That idea was informed heavily by my decision to create an asset sheet before starting. I gave myself a palette of sprites to work with, and the game formed up from&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;The timing of things worked out pretty well, since I was able to spend a good 1-2 hours every day on the game - this isn&amp;#8217;t always the case as I never know when I may or may not have extra work on my plate. Being able to finish the game in three weeks instead of four gave me some extra breathing room for bug testing and&amp;nbsp;polish.&lt;/p&gt;
&lt;h4 id="what-went-wrong"&gt;What Went&amp;nbsp;Wrong&lt;/h4&gt;
&lt;p&gt;Surprisingly little this year! My last two js13k games were, to be honest, hardly games - they were experiments, and I think I did a good job learning from them this&amp;nbsp;year.&lt;/p&gt;
&lt;p&gt;If anything, my biggest failure this year was not spending the time setting up a more streamlined build process. I did a lot of manual compilation, compressing and size-checking throughout the&amp;nbsp;competition.&lt;/p&gt;
&lt;h4 id="what-ill-do-next"&gt;What I&amp;#8217;ll Do&amp;nbsp;Next&lt;/h4&gt;
&lt;p&gt;Generally I have a bad track-record when it comes to doing post-jam/post-competition work on my games, but given the &amp;#8220;completeness&amp;#8221; of this one, I feel it&amp;#8217;d only be right to make an attempt at a tidied up post-jam version with a few extras and tweaks. I&amp;#8217;ll be attempting that if time permits after the voting period (There&amp;#8217;s a load of games to get through, and some of them are time&amp;nbsp;consuming!)&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d like to work on a &amp;#8220;Super&amp;#8221; Xycore, something a bit more complex and not limited to weird infrastructural choices born of limitations, and with a wider selection of art, sounds and music - and if work doesn&amp;#8217;t get too busy, I&amp;#8217;ll probably get somewhere with&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;For next year&amp;#8217;s JS13k I&amp;#8217;m hoping to prepare a common library of tools in advance, as well as an automated build system to streamline the process - and maybe I&amp;#8217;ll revive my original idea? Who&amp;nbsp;knows!&lt;/p&gt;
&lt;p&gt;For now, I&amp;#8217;m going to be playing the other entries! I&amp;#8217;ve played around 60 so far and there are some real standout games this year - I&amp;#8217;m looking forward to seeing what else lies in&amp;nbsp;store!&lt;/p&gt;</content><category term="Development"></category><category term="JS13k"></category><category term="Postmortem"></category></entry><entry><title>2019 Site Revamp</title><link href="https://64mega.github.io/2019-site-revamp.html" rel="alternate"></link><published>2019-07-20T00:00:00+02:00</published><updated>2019-07-20T00:00:00+02:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2019-07-20:/2019-site-revamp.html</id><summary type="html">&lt;p&gt;Behold, the only thing I ever do on my GitHub pages site anymore! Spruce up or change out my current site generator for a newer, fresher&amp;nbsp;one!&lt;/p&gt;
&lt;p&gt;This time I wasn&amp;#8217;t intending to. It turns out I&amp;#8217;d done a dumb and not committed my actual site generator configuration …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Behold, the only thing I ever do on my GitHub pages site anymore! Spruce up or change out my current site generator for a newer, fresher&amp;nbsp;one!&lt;/p&gt;
&lt;p&gt;This time I wasn&amp;#8217;t intending to. It turns out I&amp;#8217;d done a dumb and not committed my actual site generator configuration to GitHub or elsewhere. So I had to re-do everything from&amp;nbsp;scratch!&lt;/p&gt;
&lt;p&gt;I stuck with Pelican, switched to the Twitchy theme, customized it pretty heavily to get closer to the style I wanted, and completely and utterly failed to import the old site from its&amp;nbsp;feed!&lt;/p&gt;
&lt;p&gt;So I just manually re-did some posts, added some more Game posts, and will maybe use this a bit more proactively. &lt;em&gt;Maybe&lt;/em&gt;.&lt;/p&gt;</content><category term="Development"></category><category term="Misc"></category></entry><entry><title>LD44 - Venture-Out!</title><link href="https://64mega.github.io/ld44-venture-out.html" rel="alternate"></link><published>2019-04-29T00:00:00+02:00</published><updated>2019-04-29T00:00:00+02:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2019-04-29:/ld44-venture-out.html</id><summary type="html">&lt;p&gt;Venture-Out is a mix between classic Breakout and classic Nintendo ARPGs like The Legend of Zelda.
Or at least, it would be if I&amp;#8217;d had the time to flesh it out some more!
It is winnable in its current form: Find a way to open the two&amp;nbsp;chests.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Venture-Out is a mix between classic Breakout and classic Nintendo ARPGs like The Legend of Zelda.
Or at least, it would be if I&amp;#8217;d had the time to flesh it out some more!
It is winnable in its current form: Find a way to open the two&amp;nbsp;chests.&lt;/p&gt;
&lt;p&gt;The game is made for &lt;span class="caps"&gt;DOS&lt;/span&gt;, using Watcom C and &lt;span class="caps"&gt;NASM&lt;/span&gt; to produce the binaries.
To run it, double-click on one of the batch files to launch DOSBox in your preferred configuration.
Once done, you might have to manually exit DOSBox by closing the window or typing &amp;#8216;exit&amp;#8217; and hitting&amp;nbsp;enter.&lt;/p&gt;
&lt;p&gt;The idea behind this is to invest in a bit of a risk by cutting into your life-pool (Your spare balls) to
get the items you need to clear the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;Due to the obviously rushed nature of the game, things are a little bit rough around the edges: The ball
is just using pure diagonal movement with no angular change. This can make things a bit tricky.
If you have enough spare balls, you can launch some extra&amp;nbsp;ones!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;=== &lt;span class="caps"&gt;GAME&lt;/span&gt; &lt;span class="caps"&gt;CONTROLS&lt;/span&gt;&amp;nbsp;===&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PADDLE&lt;/span&gt; &lt;span class="caps"&gt;MOVEMENT&lt;/span&gt;&lt;/strong&gt;-&amp;gt; Arrow&amp;nbsp;Keys&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;LAUNCH&lt;/span&gt; A &lt;span class="caps"&gt;BALL&lt;/span&gt;&lt;/strong&gt;-&amp;gt;&amp;nbsp;Spacebar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;CHANGE&lt;/span&gt; &lt;span class="caps"&gt;SELECTED&lt;/span&gt; &lt;span class="caps"&gt;BALL&lt;/span&gt; &lt;span class="caps"&gt;TYPE&lt;/span&gt;&lt;/strong&gt;-&amp;gt; &lt;span class="caps"&gt;TAB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;EXIT&lt;/span&gt; &lt;span class="caps"&gt;GAME&lt;/span&gt;&lt;/strong&gt;-&amp;gt; &lt;span class="caps"&gt;ESCAPE&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Move off-screen to change between&amp;nbsp;areas.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re on the screen with a door in the cliff, press &lt;span class="caps"&gt;UP&lt;/span&gt; to enter it (That&amp;#8217;s the shop).
To choose an item, use the &lt;span class="caps"&gt;LEFT&lt;/span&gt; and &lt;span class="caps"&gt;RIGHT&lt;/span&gt; arrow keys, and press &lt;span class="caps"&gt;SPACE&lt;/span&gt; to select.
To leave the shop, press &lt;span class="caps"&gt;DOWN&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Thank you for trying this game&amp;nbsp;out!&lt;/p&gt;</content><category term="Game"></category><category term="Demo"></category><category term="Jam"></category><category term="Ludum Dare"></category></entry><entry><title>7D3D 2019 Framework Demo</title><link href="https://64mega.github.io/7d3d-2019-framework-demo.html" rel="alternate"></link><published>2019-01-18T00:00:00+01:00</published><updated>2019-01-18T00:00:00+01:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2019-01-18:/7d3d-2019-framework-demo.html</id><summary type="html">&lt;p&gt;A non-game technical demo as my &lt;span class="caps"&gt;7D3D&lt;/span&gt; 2019&amp;nbsp;entry.&lt;/p&gt;
&lt;p&gt;My goal for this &lt;span class="caps"&gt;7D3D&lt;/span&gt; was to knuckle down and learn some libraries, frameworks and tools for C++ that I&amp;#8217;ve been meaning to look at for a couple of&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;These included Premake, Dear ImGui, OpenGL 3.3, AssImp, &lt;span class="caps"&gt;GLFW …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A non-game technical demo as my &lt;span class="caps"&gt;7D3D&lt;/span&gt; 2019&amp;nbsp;entry.&lt;/p&gt;
&lt;p&gt;My goal for this &lt;span class="caps"&gt;7D3D&lt;/span&gt; was to knuckle down and learn some libraries, frameworks and tools for C++ that I&amp;#8217;ve been meaning to look at for a couple of&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;These included Premake, Dear ImGui, OpenGL 3.3, AssImp, &lt;span class="caps"&gt;GLFW&lt;/span&gt; and Bullet. I consider my goal &amp;#8216;successful&amp;#8217; in that I got everything working together. I&amp;#8217;m planning on using this as a foundation for the next &lt;span class="caps"&gt;7D3D&lt;/span&gt;, where I&amp;#8217;ll be attempting to build a small game on top of this&amp;nbsp;framework.&lt;/p&gt;
&lt;p&gt;The demo is three-parts, one of them which doesn&amp;#8217;t exactly work. Once the &amp;#8216;game&amp;#8217; has started, press F1 to open the Debug Window and use the State menu to change the current&amp;nbsp;state.&lt;/p&gt;
&lt;h3 id="normal-state"&gt;Normal&amp;nbsp;State:&lt;/h3&gt;
&lt;p&gt;Renders a&amp;nbsp;model.&lt;/p&gt;
&lt;h3 id="hmap-test-state"&gt;HMap Test&amp;nbsp;State:&lt;/h3&gt;
&lt;p&gt;Broken heightmap generator+viewer. Was broken due to shader and buffer changes halfway&amp;nbsp;through. &lt;/p&gt;
&lt;h3 id="main-game-state"&gt;Main Game&amp;nbsp;State:&lt;/h3&gt;
&lt;p&gt;The big &amp;#8216;everything working together&amp;#8217; state. Has a bunch of physics objects spawned randomly, colliding with each other. Camera is following one of the ships and can be moved by using the debug panel and changing the ship X/Y/Z&amp;nbsp;variables.&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s literally all there is to&amp;nbsp;it!&lt;/p&gt;
&lt;h3 id="source-code-notes"&gt;Source Code&amp;nbsp;Notes:&lt;/h3&gt;
&lt;p&gt;Most of the source code is included in the source download, and it&amp;#8217;s a &lt;em&gt;mess&lt;/em&gt;. You have been warned. This is certifiable Jam&amp;nbsp;Code.&lt;/p&gt;</content><category term="Jam"></category><category term="Demo"></category></entry><entry><title>7D3D 2018 Browser Software Renderer</title><link href="https://64mega.github.io/7d3d-2018-software-renderer.html" rel="alternate"></link><published>2018-01-18T00:00:00+01:00</published><updated>2018-01-18T00:00:00+01:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2018-01-18:/7d3d-2018-software-renderer.html</id><summary type="html">&lt;p&gt;Made for the &lt;a href="http://itch.io/jam/7d3d-2"&gt;&lt;span class="caps"&gt;7D3D&lt;/span&gt; Jam, January 2018&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a relatively simple software rasterizer written in JavaScript in just under 7&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s nothing more than a simple demo at this point. You can walk around, open doors and shoot a bit. As per tradition, I ran out of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Made for the &lt;a href="http://itch.io/jam/7d3d-2"&gt;&lt;span class="caps"&gt;7D3D&lt;/span&gt; Jam, January 2018&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a relatively simple software rasterizer written in JavaScript in just under 7&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s nothing more than a simple demo at this point. You can walk around, open doors and shoot a bit. As per tradition, I ran out of time to do anything&amp;nbsp;else.&lt;/p&gt;
&lt;p&gt;Controls&amp;nbsp;are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arrow Keys:&lt;/strong&gt; walk and&amp;nbsp;turn&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Space Bar:&lt;/strong&gt;&amp;nbsp;shoot&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;E key:&lt;/strong&gt; interact (E.G: Open&amp;nbsp;doors)&lt;/p&gt;
&lt;p&gt;The full source code is available on GitHub. Beware, it&amp;#8217;s&amp;nbsp;jam-spaghetti!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/64Mega/7D3D-2-Demo"&gt;https://github.com/64Mega/&lt;span class="caps"&gt;7D3D&lt;/span&gt;-2-Demo&lt;/a&gt;&lt;/p&gt;</content><category term="Game"></category><category term="Demo"></category><category term="Jam"></category></entry><entry><title>JS13k Postmortem 2017</title><link href="https://64mega.github.io/js13k-postmortem-2017.html" rel="alternate"></link><published>2017-09-09T00:00:00+02:00</published><updated>2017-09-09T00:00:00+02:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2017-09-09:/js13k-postmortem-2017.html</id><summary type="html">&lt;p&gt;&lt;img alt="cover image" src="https://i.imgur.com/BaCRUJQ.png"&gt;&lt;/p&gt;
&lt;p&gt;Whew, that&amp;#8217;s my second JS13k out of the way and boy was it a fun&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;Now I&amp;#8217;ll be honest and say that I have absolutely no idea how I should approach writing a postmortem for the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;I started Lost In Labyrinth almost a whole month ago …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cover image" src="https://i.imgur.com/BaCRUJQ.png"&gt;&lt;/p&gt;
&lt;p&gt;Whew, that&amp;#8217;s my second JS13k out of the way and boy was it a fun&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;Now I&amp;#8217;ll be honest and say that I have absolutely no idea how I should approach writing a postmortem for the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;I started Lost In Labyrinth almost a whole month ago, worked on it mostly at the wee hours between midnight and &lt;span class="caps"&gt;3AM&lt;/span&gt;, and generally changed direction too many times to&amp;nbsp;count.&lt;/p&gt;
&lt;p&gt;So what I&amp;#8217;ll do to try and maintain a semi-coherent line of thought throughout is to do the typical postmortem thing of &amp;#8220;What went right&amp;#8221; and &amp;#8220;What went wrong&amp;#8221;, followed by a breakdown of my code and what I think I was getting at when I wrote&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll again lean towards honesty and state that the code is a mess. Not merely because it&amp;#8217;s jam code, but because I changed methods used several times throughout development, without necessarily cutting out the old work or refactoring (As will be seen with the &lt;code&gt;EnemyManager&lt;/code&gt; code later&amp;nbsp;on).&lt;/p&gt;
&lt;p&gt;Without further rambling, I&amp;#8217;ll get straight to the&amp;nbsp;summary.&lt;/p&gt;
&lt;h1 id="what-i-wanted"&gt;What I&amp;nbsp;wanted&lt;/h1&gt;
&lt;p&gt;Going into JS13k this year I attempted to keep my goals&amp;nbsp;realistic.&lt;/p&gt;
&lt;p&gt;Last year I aimed &lt;em&gt;way&lt;/em&gt; too high with my Commander Crash idea, trying to make a &amp;#8216;simple&amp;#8217; space trucker/adventure&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;So in the end of that I ended up with a menuing system and some flying&amp;nbsp;stars.&lt;/p&gt;
&lt;p&gt;This year, once I saw the theme, I decided after a day of doodling with pixels and tossing a few ideas around in my head to go with a retro&amp;nbsp;platformer.&lt;/p&gt;
&lt;p&gt;Now when I use the term retro I&amp;#8217;m not referring to &amp;#8220;pixel art&amp;#8221; or the nebulous &amp;#8220;8-bit&amp;#8221;, but I&amp;#8217;m thinking of a very specific type of platformer I used to play as a child: The &lt;span class="caps"&gt;DOS&lt;/span&gt; era&amp;nbsp;platformer.&lt;/p&gt;
&lt;p&gt;Anybody remember the Commander Keen games? Bio Menace? Yeah. Those are a breed of platformer that have a certain feel to them that you don&amp;#8217;t see often these&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;Most modern indie platformers try to instead go for the Mario or Mega Man style platforming (Nothing wrong with that), but I&amp;#8217;d personally like to see some more Collect-a-thons and keycard puzzlers out there, as well as some more of what La Mulana and Iji&amp;nbsp;did.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m getting off track&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Lost In Labyrinth was intended to be a game that, as much as possible, captured that basic gameplay of navigating a level, dispatching enemies, finding the key for that level and leaving - all while collecting goodies for points along the&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;If you play the game as it stands now, you&amp;#8217;ll only see some fragments of that vision that made it into the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;I still feel quite happy with how things turned out this year, because I feel like I have so much more of a game than I did last year, and the learning experience is&amp;nbsp;invaluable.&lt;/p&gt;
&lt;h1 id="what-went-right"&gt;What went&amp;nbsp;right&lt;/h1&gt;
&lt;h2 id="the-development-process"&gt;The development&amp;nbsp;process&lt;/h2&gt;
&lt;p&gt;This year I spent extra time before the compo started getting to grips with gulp, and putting some thought into keeping byte-cost down while still allowing for a reasonably complex&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;Additionally, a bit of structure helped a lot. I allotted two hours every day to the development of the game, and often went well beyond that once I had gotten&amp;nbsp;started.&lt;/p&gt;
&lt;p&gt;Finally, browser-sync was indispensable. Being able to hot-reload the game every time changes are made make all the&amp;nbsp;difference.&lt;/p&gt;
&lt;p&gt;Save a file? Instant reload. Change a sprite? Instant&amp;nbsp;reload.&lt;/p&gt;
&lt;p&gt;Efficient development is all about feedback and iteration. The faster we get our feedback (The results), the faster we can iterate on those&amp;nbsp;results.&lt;/p&gt;
&lt;h2 id="the-scope"&gt;The&amp;nbsp;scope&lt;/h2&gt;
&lt;p&gt;Barring the fact that I didn&amp;#8217;t finish it, the scope of the game was&amp;nbsp;reasonable.&lt;/p&gt;
&lt;p&gt;Given another solid week of development I may well have finished it in the way I intended&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="the-motivation"&gt;The&amp;nbsp;motivation&lt;/h2&gt;
&lt;p&gt;Last year I was only beginning to dip my toes into the Javascript ecosystem, learning technologies like React, Angular and&amp;nbsp;Vue.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m now hopelessly hooked on Javascript as a programming&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;I come from a C and C++ background, and would adamantly hold onto it (C++) as the One True&amp;nbsp;Language.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t get me wrong, I still love C++, and I still develop with it, but I love the Javascript development&amp;nbsp;ecosystem.&lt;/p&gt;
&lt;p&gt;Back to the point: Last year my motivation was that the jam itself was a&amp;nbsp;curiosity.&lt;/p&gt;
&lt;p&gt;This year, my motivation is that I wanted to learn more about Javascript. Mission&amp;nbsp;accomplished.&lt;/p&gt;
&lt;h1 id="what-went-wrong"&gt;What went&amp;nbsp;wrong&lt;/h1&gt;
&lt;h2 id="the-scope_1"&gt;The&amp;nbsp;scope&lt;/h2&gt;
&lt;p&gt;Yes, this also went &lt;em&gt;wrong&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I went into this determined to make a game that would fit into the one month of development available to me, and designed my concept around this time&amp;nbsp;limit.&lt;/p&gt;
&lt;p&gt;I forgot to take working life into&amp;nbsp;account.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m what you could call an odd-jobber. I repair computers, I design small websites, I do basic graphics design for print as well as art for&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;What I failed to remember is that what seems like a slow month for callouts, contracts and commissions can easily become a maelstrom of&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;So for the first two weeks everything was silent. Then week 3 began with a flurry of activity from a few clients of mine, a rash of broken computers, support queries and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;This week was, again, busy - and also has me working on a website proposal for a local&amp;nbsp;business-owner.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll never complain about work, but I should have taken my estimate of &amp;#8220;Yeah, I can finish this in a month&amp;#8221; and cut it down to &amp;#8220;I &lt;em&gt;need&lt;/em&gt; the core game to be completed within a&amp;nbsp;week&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Lessons for next&amp;nbsp;year.&lt;/p&gt;
&lt;h2 id="the-code"&gt;The&amp;nbsp;code&lt;/h2&gt;
&lt;p&gt;In short: Don&amp;#8217;t develop games while short on&amp;nbsp;sleep.&lt;/p&gt;
&lt;p&gt;Most of my development efforts were happening between midnight and &lt;span class="caps"&gt;3AM&lt;/span&gt;, for&amp;nbsp;reasons.&lt;/p&gt;
&lt;p&gt;Coffee helps at the time, but nothing can prepare you for the next-day confusion (I call it code hangover), because you will not remember why you did what you did, nor what any of it does other than what was on the&amp;nbsp;&amp;#8216;tin&amp;#8217;.&lt;/p&gt;
&lt;p&gt;I spent a lot of my mornings fixing and replacing spaghetti code in order to continue&amp;nbsp;working.&lt;/p&gt;
&lt;h2 id="the-schedule"&gt;The&amp;nbsp;schedule&lt;/h2&gt;
&lt;p&gt;A month seems like such a long stretch of time when you&amp;#8217;re looking at it from the beginning of said&amp;nbsp;month.&lt;/p&gt;
&lt;p&gt;The month I had disappeared before I knew what happened. I had a schedule worked out, but I&amp;#8217;ll admit I fell into the trap of creating one code feature and taking a coffee break, even if that feature only took me 10 minutes to&amp;nbsp;make.&lt;/p&gt;
&lt;p&gt;Next year I&amp;#8217;ll be using the Pomodoro method and basically forcing myself to work solid blocks of time instead of taking breaks, much like I do when working on client&amp;nbsp;projects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2019&amp;nbsp;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I actually couldn&amp;#8217;t participate in 2018&amp;#8217;s JS13k due to a death in the family happening
at the same time as a big contract job. I was completely drained for the rest of the&amp;nbsp;year.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be making a comeback this&amp;nbsp;year!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="code-breakdown"&gt;Code&amp;nbsp;breakdown&lt;/h1&gt;
&lt;p&gt;And here we get to the real meat of this postmortem, or so I&amp;nbsp;hope.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s difficult to break down my decision making process when half of that process took place during the midnight shift, but I&amp;#8217;ll try to do a&amp;nbsp;code-walk.&lt;/p&gt;
&lt;p&gt;The code is all visible on &lt;a href="https://github.com/64Mega/lil-js13k"&gt;GitHub&lt;/a&gt;, so reference there if you need&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s begin with the first thing I made for the project: my index.html&amp;nbsp;file.&lt;/p&gt;
&lt;h2 id="indexhtml"&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I kept it simple, and unlike last year&amp;#8217;s entry I defined the canvas element here instead of trying to create it in&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; I worked it out to be a saving of a couple of bytes that&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll also notice a single &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. This is a placeholder for an inline image that gets substituted by my gulpfile on&amp;nbsp;build.&lt;/p&gt;
&lt;p&gt;I have two image files for the entire game, one for tiles and one for sprites: But only the tiles image is inlined. I&amp;#8217;ll explain why further&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;Also seen here is a pretty standard &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag for setting up the display width and height. The game kinda works on mobile, but I didn&amp;#8217;t set up any virtual keys for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;If you have a tablet with an attachable keyboard, it works pretty much&amp;nbsp;as-expected.&lt;/p&gt;
&lt;h2 id="gulpfilejs"&gt;&lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Last year I made the quirky decision to forgo tools such as webpack or gulp and used C Preprocessor files to concatenate my source into a single &lt;span class="caps"&gt;JS&lt;/span&gt; file for&amp;nbsp;distribution.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll admit that it was because I thought I didn&amp;#8217;t have the time to learn the&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;This year, I made a point of learning gulp, and making use of the great resources page on the&amp;nbsp;JS13k.&lt;/p&gt;
&lt;p&gt;I stepped through one of the gulpfiles there and made a tweak or two to it as I progressed through development (The major one being the inlining of the tiles.png&amp;nbsp;image).&lt;/p&gt;
&lt;p&gt;Gulp is&amp;nbsp;awesome.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Another interjection from the&amp;nbsp;future&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I actually hesitate to recommend Gulp for anything outside of absurdly complex&amp;nbsp;deployments.&lt;/p&gt;
&lt;p&gt;For small projects and such, I recommend Parcel. It&amp;#8217;s refreshingly &lt;em&gt;simple&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="gamecss"&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Next up was my css. I like to have a pretty firm idea of what my game is going to look like on the player&amp;#8217;s&amp;nbsp;device.&lt;/p&gt;
&lt;p&gt;The main thing to note here is the #gcanvas styles, specifically the &lt;code&gt;image-rendering&lt;/code&gt;property.&lt;/p&gt;
&lt;p&gt;This is what allows me to render crispy pixels without fiddling too much with the&amp;nbsp;context.&lt;/p&gt;
&lt;p&gt;Also of note is that &lt;code&gt;#img-tiles&lt;/code&gt; gets hidden, since otherwise the browser would render it on top of the canvas, and that wouldn&amp;#8217;t do at&amp;nbsp;all.&lt;/p&gt;
&lt;h1 id="actual-game-code"&gt;Actual Game&amp;nbsp;Code&lt;/h1&gt;
&lt;p&gt;So here we start to get into the game&amp;#8217;s&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;A thing to note here is that originally I had a single file, &lt;code&gt;game.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I began to split parts of it off into separate files, and if you&amp;#8217;re wondering what the leading numbers are for, they&amp;#8217;re just there to order the files in my editor pane a&amp;nbsp;bit.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s dig into this, starting&amp;nbsp;with&amp;#8230;&lt;/p&gt;
&lt;h2 id="1_configjs"&gt;&lt;code&gt;1_config.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is basically my global configuration, where I&amp;#8217;m supposed to be keeping all of my&amp;nbsp;constants.&lt;/p&gt;
&lt;p&gt;I polluted it a bit at some point with the the two functions &lt;code&gt;afor&lt;/code&gt; and &lt;code&gt;rfor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Those two are&amp;nbsp;interesting.&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;afor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rfor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I made these during one of my midnight-shifts as, if I recall, a way to save a few bytes when needing a for loop to range over an array or, in the case of &lt;code&gt;rfor&lt;/code&gt;, up to a fixed&amp;nbsp;number.&lt;/p&gt;
&lt;p&gt;I wasted at least 10 minutes making these, then another 20 minutes replacing all of my for loops in the rest of the&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Want to know how much space this saved? I gained about 8&amp;nbsp;bytes.&lt;/p&gt;
&lt;p&gt;Premature optimization is&amp;nbsp;bad.&lt;/p&gt;
&lt;h2 id="2_inputjs"&gt;&lt;code&gt;2_input.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is my input handler. I took a look at &lt;a href="https://xem.github.io/articles/#jsgamesinputs"&gt;How to support arrow keys, &lt;span class="caps"&gt;WASD&lt;/span&gt; and &lt;span class="caps"&gt;ZQSD&lt;/span&gt; keyboard inputs in just 160b of &lt;span class="caps"&gt;JS&lt;/span&gt;&lt;/a&gt; on the Resources page, and initially decided to go with&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;I soon found that because I was using strict mode, I couldn&amp;#8217;t. I also found that I wanted my own input scheme, and at the time I was making this (Hint: Was past midnight) I didn&amp;#8217;t feel like code-golfing a tiny&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;So I brute-forced the problem. Un-minified, my input code is about 400 bytes of code and covers the entire range of keyboard&amp;nbsp;inputs.&lt;/p&gt;
&lt;p&gt;All it does is assume a 255 key maximum (Should be 256, but again: midnight code), and on keydown/keyup sets the &lt;span class="caps"&gt;KEYS&lt;/span&gt; array to 1 or&amp;nbsp;0.&lt;/p&gt;
&lt;p&gt;That was the original version. Then later on I decided I wanted a keypress check (E.G: Fire only on first&amp;nbsp;press).&lt;/p&gt;
&lt;p&gt;Normally for this I use an on-location bool &amp;#8216;toggle&amp;#8217;. Something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;kp_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;KEYS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;kp_space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Do a thing&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;kp_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;kp_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This takes up quite a bit of space and looks&amp;nbsp;ugly.&lt;/p&gt;
&lt;p&gt;So again I leveraged the fact that I had no restrictions on memory and defined a mirror array called &lt;span class="caps"&gt;PRKS&lt;/span&gt; (Pressed Keys). On key down, the &lt;span class="caps"&gt;KEYS&lt;/span&gt; array is set to 1, but not the &lt;span class="caps"&gt;PRKS&lt;/span&gt;&amp;nbsp;array.&lt;/p&gt;
&lt;p&gt;When the function &lt;code&gt;pressed&lt;/code&gt; is called, then the &lt;span class="caps"&gt;PRKS&lt;/span&gt; array is set using a little block of ternary, which also flags the return value as &lt;code&gt;false&lt;/code&gt; if &lt;span class="caps"&gt;PRKS&lt;/span&gt; is already set to&amp;nbsp;1.&lt;/p&gt;
&lt;p&gt;The onkeyup handler sets &lt;span class="caps"&gt;PRKS&lt;/span&gt; back to 0&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;That changed that ugly block of code above to&amp;nbsp;this:&lt;/p&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do a thing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then there&amp;#8217;s the &lt;code&gt;held&lt;/code&gt; function that is a more readable check against the &lt;span class="caps"&gt;KEYS&lt;/span&gt;&amp;nbsp;array.&lt;/p&gt;
&lt;h2 id="3_renderjs"&gt;&lt;code&gt;3_render.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s where I have all of my drawing functions (I&amp;nbsp;think).&lt;/p&gt;
&lt;p&gt;The first thing to note is two constants that &lt;em&gt;shouldn&amp;#8217;t be here&lt;/em&gt;. They should be in &lt;code&gt;1_config.js&lt;/code&gt;, but hey, jam&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PALETTE&lt;/code&gt; array is 16 hard coded palette entries. I chose the Arne16 palette in Aseprite for my game from the start, and I&amp;#8217;ll show how I leveraged this later&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;palette_match&lt;/code&gt; function compares &lt;span class="caps"&gt;RGB&lt;/span&gt; values with the &lt;code&gt;PALETTE&lt;/code&gt; array, which was used for the leverage I mentioned&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;load_spritemap()&lt;/code&gt; and &lt;code&gt;load_tilemap()&lt;/code&gt; do what they say on the tin, but &lt;code&gt;load_tilemap()&lt;/code&gt; is no longer in use and should have been&amp;nbsp;removed.&lt;/p&gt;
&lt;p&gt;You can see here a little &amp;#8216;cheat&amp;#8217; I did to get myself a quick set of flipped sprites without using up more bytes than&amp;nbsp;necessary.&lt;/p&gt;
&lt;p&gt;I draw the sprites.png image onto a new canvas, flipped, and save that to the &lt;code&gt;DATA&lt;/code&gt; block, that you&amp;#8217;ll be seeing&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;Below this is &lt;code&gt;drawsprite&lt;/code&gt;, this takes an array of cell values and performs a lookup into the&amp;nbsp;spritesheet.&lt;/p&gt;
&lt;p&gt;It works row-wise, left to right. Sprite 0 is at 0px,0px, Sprite 1 is at 16px,0px, Sprite 16 is at 0px,16px,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;You can see here that a global timer is used to determine which frame to draw, and here you can also see the flipped sprite image being&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;The only other real functions of note are &lt;code&gt;drawtext&lt;/code&gt; and &lt;code&gt;drawnum&lt;/code&gt;, those draw 8x8 cells from the spritesheet at specific locations (Hard coded). Saved me having to make a full font sheet, also saved a few&amp;nbsp;bytes.&lt;/p&gt;
&lt;h2 id="4_playerjs"&gt;&lt;code&gt;4_player.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;And here is the messiest (And largest) file in the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;The player code went through several changes during my development process, and I remember fondly when my &lt;code&gt;playerdata&lt;/code&gt; structure consisted of nothing more than &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;Aside from a few artifacts left over from refactoring, things should be fairly straightforward to read through in this&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;At some point I decided to use a state machine to perform actions, but I strayed from the pattern halfway through, so excuse that&amp;nbsp;mess.&lt;/p&gt;
&lt;p&gt;The main entrypoint is the &lt;code&gt;obj.update&lt;/code&gt; method, and the majority of the code in the &lt;code&gt;st_*&lt;/code&gt; functions is hastily thrown together implementations of basic game mechanics (E.G: Gravity and&amp;nbsp;collision).&lt;/p&gt;
&lt;h2 id="5_audiojs"&gt;&lt;code&gt;5_audio.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This was the last piece of code I worked on before I had to submit&amp;nbsp;early.&lt;/p&gt;
&lt;p&gt;After reading a few of the articles on the Resource page and looking at some of the music generators, I decided to go take a look at the Audio &lt;span class="caps"&gt;API&lt;/span&gt; myself, and set up a simple tone&amp;nbsp;generator.&lt;/p&gt;
&lt;p&gt;It kinda works, but also kinda doesn&amp;#8217;t&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I have ideas as to why, but it&amp;#8217;s been ages since I&amp;#8217;ve worked with audio. Next year I&amp;#8217;ll put some extra effort into&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="11_enemyjs"&gt;&lt;code&gt;11_enemy.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Another large file. This one is a bit of a lie: It says &lt;code&gt;enemy&lt;/code&gt; but is, in fact, &lt;code&gt;entity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Originally I started out making this solely a file handling enemy behaviors and&amp;nbsp;updates.&lt;/p&gt;
&lt;p&gt;Then I decided I wanted to add a little explosion effect on enemy death, and decided to just leverage the fact that I had a manager already: Thus was born the EnemyManager that I never got around to renaming to&amp;nbsp;EntityManager.&lt;/p&gt;
&lt;p&gt;You can see here that the behaviors for the enemies are pretty simple, they have no gravity and no refined collision&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;Not too much to say about this one, it&amp;#8217;s pretty much standard implementation&amp;nbsp;detail.&lt;/p&gt;
&lt;h2 id="99_gamejs"&gt;&lt;code&gt;99_game.js&lt;/code&gt;&lt;/h2&gt;
&lt;div class="xhighlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// BEWARE: Here be messy and incoherent code and/or dragons.&lt;/span&gt;
&lt;span class="c1"&gt;// You have been warned.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first two lines I wrote during&amp;nbsp;development.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m a code pessimist. I wasn&amp;#8217;t strictly &lt;em&gt;wrong&lt;/em&gt;,&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;Here you can see a few bits and pieces: Data storage, Game states, World and&amp;nbsp;Camera.&lt;/p&gt;
&lt;p&gt;Also a poorly placed &lt;code&gt;load_spritemap()&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;The big block of code below all that though is what made the game, as far as I was&amp;nbsp;concerned.&lt;/p&gt;
&lt;p&gt;During development, one of my biggest concerns was how to fit meaningful level data in the game without making the filesize hit 13k too&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;Arrays and base64 encoding took too much space as far as I was concerned (Did test them out), they would have limited the total playfield to a pretty small&amp;nbsp;size.&lt;/p&gt;
&lt;p&gt;Procedural generation is always an option, but I have a predisposition towards wanting to hand-design my levels. Can assure that people are playing the game the way I intended it that&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;So I decided to leverage my existing&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;I sacrificed half of my &lt;code&gt;tiles.png&lt;/code&gt; image to become a map. If you open it, you&amp;#8217;ll see the level drawn on the right-hand-side of the&amp;nbsp;image.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;build_levels&lt;/code&gt; function iterates over that half and adds tiles to the &lt;span class="caps"&gt;WORLD&lt;/span&gt;&amp;nbsp;structure.&lt;/p&gt;
&lt;p&gt;This is the reason I had to inline my tiles.png image: The &lt;span class="caps"&gt;HTML5&lt;/span&gt; canvas will complain about the canvas being tainted if you draw an externally loaded image to it then try to read back from it (&lt;span class="caps"&gt;CORS&lt;/span&gt;&amp;nbsp;related).&lt;/p&gt;
&lt;p&gt;I got around it by sacrificing a few bytes to inline the image, and the result is that I had a &amp;#8216;level editor&amp;#8217; at hand in the form of&amp;nbsp;Aseprite.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a zoomed-in picture of the game&amp;#8217;s map as it stands&amp;nbsp;now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="zoomed-in picture of game level" src="https://i.imgur.com/NmSp956.png"&gt;&lt;/p&gt;
&lt;p&gt;Each color in my 16-color palette means something. White is&amp;nbsp;walls/floors.&lt;/p&gt;
&lt;p&gt;Red is an enemy, and is randomly chosen from a pool. My plan was to later use the screen-y value to modify the pool, so harder enemies would show up the further you&amp;nbsp;went.&lt;/p&gt;
&lt;p&gt;The green dot is the player spawn, and the orange line is an &amp;#8216;obstacle&amp;#8217;. Each Y level would have an obstacle, and this was my way of adding variation without needing more than 16&amp;nbsp;colors.&lt;/p&gt;
&lt;p&gt;Ditto for the walls and floors. The tilemap is assigned from top-to-bottom, with each Y level getting the next one&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;I was quite proud of this, it sped the development process up considerably, and kept my options limited (A good thing in game jams and&amp;nbsp;competitions).&lt;/p&gt;
&lt;p&gt;At this point, the remainder of the file is standard implementation, no trickery&amp;nbsp;involved.&lt;/p&gt;
&lt;h1 id="final-notes"&gt;Final&amp;nbsp;Notes&lt;/h1&gt;
&lt;p&gt;That was a beast to&amp;nbsp;write.&lt;/p&gt;
&lt;p&gt;Another lesson for next year: Take notes, or at least comment more. It&amp;#8217;ll make writing the postmortem a lot&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;I had a load of fun this year, and look forward to next year&amp;#8217;s&amp;nbsp;competition.&lt;/p&gt;
&lt;p&gt;Thanks for&amp;nbsp;reading!&lt;/p&gt;</content><category term="Game Development"></category><category term="JavaScript"></category><category term="JS13k"></category><category term="Postmortem"></category></entry><entry><title>LD38 - Swords of Xalavus</title><link href="https://64mega.github.io/ld38-swords-of-xalavus.html" rel="alternate"></link><published>2017-04-24T00:00:00+02:00</published><updated>2017-04-24T00:00:00+02:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2017-04-24:/ld38-swords-of-xalavus.html</id><summary type="html">&lt;p&gt;Made for Ludum Dare 38. Loosely adheres to the theme by way of the game being somewhat small for its&amp;nbsp;genre.&lt;/p&gt;
&lt;p&gt;Swords of Xalavus is a simple &lt;span class="caps"&gt;CRPG&lt;/span&gt; made with nothing but &lt;span class="caps"&gt;HTML5&lt;/span&gt; and a stroke of&amp;nbsp;madness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Control Overview:&lt;/strong&gt;
The game controls very much like certain old &lt;span class="caps"&gt;PC&lt;/span&gt; RPGs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Made for Ludum Dare 38. Loosely adheres to the theme by way of the game being somewhat small for its&amp;nbsp;genre.&lt;/p&gt;
&lt;p&gt;Swords of Xalavus is a simple &lt;span class="caps"&gt;CRPG&lt;/span&gt; made with nothing but &lt;span class="caps"&gt;HTML5&lt;/span&gt; and a stroke of&amp;nbsp;madness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Control Overview:&lt;/strong&gt;
The game controls very much like certain old &lt;span class="caps"&gt;PC&lt;/span&gt; RPGs. A list of available actions is displayed in the player window on the right-hand side of the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;Move with the arrow keys, perform actions by pressing their associated&amp;nbsp;letter.&lt;/p&gt;
&lt;p&gt;Certain actions (Attack, Get, Look, Cast) require you to select a target. Move the cursor with the arrow keys and press either enter or the same key again to&amp;nbsp;confirm.&lt;/p&gt;
&lt;p&gt;To equip weapons and spells, use the Inventory and press Enter. Some of the weapons require you to level up a bit&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt;
Go into the room to your immediate left and get the starting weapon! Read the signs there to get some in-game&amp;nbsp;tips.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Known Issues:&lt;/strong&gt;
+ Audio sometimes not working in Firefox.
+ Sound effects sometimes not working in Internet&amp;nbsp;Explorer/Edge.&lt;/p&gt;</content><category term="Game"></category><category term="Demo"></category><category term="Jam"></category><category term="Ludum Dare"></category></entry><entry><title>DarkSlashRun Demo 01</title><link href="https://64mega.github.io/darkslashrun-demo-01.html" rel="alternate"></link><published>2016-06-16T00:00:00+02:00</published><updated>2016-06-16T00:00:00+02:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2016-06-16:/darkslashrun-demo-01.html</id><summary type="html">&lt;p&gt;&lt;img alt="cover image" src="https://img.itch.zone/aW1hZ2UvNTY4MDUvMjU0OTUzLnBuZw==/original/9Xf%2Bsd.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Created for NAGJam&amp;nbsp;2016&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The theme was &amp;#8220;Down, but Not Out&amp;#8221;. My take on that is a &amp;#8220;revival&amp;#8221; mechanic that puts the player back at the last checkpoint (Nothing revolutionary). The twists were: The player loses their items and artifacts upon death and has to try get to their point …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cover image" src="https://img.itch.zone/aW1hZ2UvNTY4MDUvMjU0OTUzLnBuZw==/original/9Xf%2Bsd.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Created for NAGJam&amp;nbsp;2016&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The theme was &amp;#8220;Down, but Not Out&amp;#8221;. My take on that is a &amp;#8220;revival&amp;#8221; mechanic that puts the player back at the last checkpoint (Nothing revolutionary). The twists were: The player loses their items and artifacts upon death and has to try get to their point of death to pick them up again, and with each death the player&amp;#8217;s maximum &lt;span class="caps"&gt;HP&lt;/span&gt; will drop a little (This feature didn&amp;#8217;t make it into the&amp;nbsp;prototype).&lt;/p&gt;
&lt;p&gt;The &amp;#8216;vision&amp;#8217; I have for this game is of a Roguelite, randomly generated dungeons and realms with pseudo-random enemies, items and bosses. What I&amp;#8217;ve got to show here is a fragment of what I had&amp;nbsp;planned.&lt;/p&gt;
&lt;p&gt;Instructions are explained in-game, but a&amp;nbsp;recap:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="controls"&gt;Controls&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Arrow Keys:&amp;nbsp;Movement&lt;/li&gt;
&lt;li&gt;Z Key:&amp;nbsp;Dash/Dodge&lt;/li&gt;
&lt;li&gt;X Key: Use Healing&amp;nbsp;Potions&lt;/li&gt;
&lt;li&gt;C Key: Use Secondary Weapon if you&amp;#8217;ve picked it&amp;nbsp;up&lt;/li&gt;
&lt;li&gt;V Key: Use&amp;nbsp;Sword&lt;/li&gt;
&lt;li&gt;Escape: Exit to Title, or if on Title screen, exit&amp;nbsp;game&lt;/li&gt;
&lt;li&gt;F4: Toggle&amp;nbsp;Fullscreen&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thank you for&amp;nbsp;playing!&lt;/p&gt;</content><category term="Demo"></category><category term="Jam"></category><category term="Game"></category></entry></feed>