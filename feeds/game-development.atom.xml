<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>64Bytes - Game Development</title><link href="https://64mega.github.io/" rel="alternate"></link><link href="https://64mega.github.io/feeds/game-development.atom.xml" rel="self"></link><id>https://64mega.github.io/</id><updated>2017-09-09T00:00:00+02:00</updated><subtitle>A miserable little pile of development secrets</subtitle><entry><title>JS13k Postmortem 2017</title><link href="https://64mega.github.io/js13k-postmortem-2017.html" rel="alternate"></link><published>2017-09-09T00:00:00+02:00</published><updated>2017-09-09T00:00:00+02:00</updated><author><name>Daniel '64Mega' Lawrence</name></author><id>tag:64mega.github.io,2017-09-09:/js13k-postmortem-2017.html</id><summary type="html">&lt;p&gt;&lt;img alt="cover image" src="https://i.imgur.com/BaCRUJQ.png"&gt;&lt;/p&gt;
&lt;p&gt;Whew, that&amp;#8217;s my second JS13k out of the way and boy was it a fun&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;Now I&amp;#8217;ll be honest and say that I have absolutely no idea how I should approach writing a postmortem for the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;I started Lost In Labyrinth almost a whole month ago …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cover image" src="https://i.imgur.com/BaCRUJQ.png"&gt;&lt;/p&gt;
&lt;p&gt;Whew, that&amp;#8217;s my second JS13k out of the way and boy was it a fun&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;Now I&amp;#8217;ll be honest and say that I have absolutely no idea how I should approach writing a postmortem for the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;I started Lost In Labyrinth almost a whole month ago, worked on it mostly at the wee hours between midnight and &lt;span class="caps"&gt;3AM&lt;/span&gt;, and generally changed direction too many times to&amp;nbsp;count.&lt;/p&gt;
&lt;p&gt;So what I&amp;#8217;ll do to try and maintain a semi-coherent line of thought throughout is to do the typical postmortem thing of &amp;#8220;What went right&amp;#8221; and &amp;#8220;What went wrong&amp;#8221;, followed by a breakdown of my code and what I think I was getting at when I wrote&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll again lean towards honesty and state that the code is a mess. Not merely because it&amp;#8217;s jam code, but because I changed methods used several times throughout development, without necessarily cutting out the old work or refactoring (As will be seen with the &lt;code&gt;EnemyManager&lt;/code&gt; code later&amp;nbsp;on).&lt;/p&gt;
&lt;p&gt;Without further rambling, I&amp;#8217;ll get straight to the&amp;nbsp;summary.&lt;/p&gt;
&lt;h1&gt;What I&amp;nbsp;wanted&lt;/h1&gt;
&lt;p&gt;Going into JS13k this year I attempted to keep my goals&amp;nbsp;realistic.&lt;/p&gt;
&lt;p&gt;Last year I aimed &lt;em&gt;way&lt;/em&gt; too high with my Commander Crash idea, trying to make a &amp;#8216;simple&amp;#8217; space trucker/adventure&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;So in the end of that I ended up with a menuing system and some flying&amp;nbsp;stars.&lt;/p&gt;
&lt;p&gt;This year, once I saw the theme, I decided after a day of doodling with pixels and tossing a few ideas around in my head to go with a retro&amp;nbsp;platformer.&lt;/p&gt;
&lt;p&gt;Now when I use the term retro I&amp;#8217;m not referring to &amp;#8220;pixel art&amp;#8221; or the nebulous &amp;#8220;8-bit&amp;#8221;, but I&amp;#8217;m thinking of a very specific type of platformer I used to play as a child: The &lt;span class="caps"&gt;DOS&lt;/span&gt; era&amp;nbsp;platformer.&lt;/p&gt;
&lt;p&gt;Anybody remember the Commander Keen games? Bio Menace? Yeah. Those are a breed of platformer that have a certain feel to them that you don&amp;#8217;t see often these&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;Most modern indie platformers try to instead go for the Mario or Mega Man style platforming (Nothing wrong with that), but I&amp;#8217;d personally like to see some more Collect-a-thons and keycard puzzlers out there, as well as some more of what La Mulana and Iji&amp;nbsp;did.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m getting off track&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Lost In Labyrinth was intended to be a game that, as much as possible, captured that basic gameplay of navigating a level, dispatching enemies, finding the key for that level and leaving - all while collecting goodies for points along the&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;If you play the game as it stands now, you&amp;#8217;ll only see some fragments of that vision that made it into the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;I still feel quite happy with how things turned out this year, because I feel like I have so much more of a game than I did last year, and the learning experience is&amp;nbsp;invaluable.&lt;/p&gt;
&lt;h1&gt;What went&amp;nbsp;right&lt;/h1&gt;
&lt;h2&gt;The development&amp;nbsp;process&lt;/h2&gt;
&lt;p&gt;This year I spent extra time before the compo started getting to grips with gulp, and putting some thought into keeping byte-cost down while still allowing for a reasonably complex&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;Additionally, a bit of structure helped a lot. I allotted two hours every day to the development of the game, and often went well beyond that once I had gotten&amp;nbsp;started.&lt;/p&gt;
&lt;p&gt;Finally, browser-sync was indispensable. Being able to hot-reload the game every time changes are made make all the&amp;nbsp;difference.&lt;/p&gt;
&lt;p&gt;Save a file? Instant reload. Change a sprite? Instant&amp;nbsp;reload.&lt;/p&gt;
&lt;p&gt;Efficient development is all about feedback and iteration. The faster we get our feedback (The results), the faster we can iterate on those&amp;nbsp;results.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;scope&lt;/h2&gt;
&lt;p&gt;Barring the fact that I didn&amp;#8217;t finish it, the scope of the game was&amp;nbsp;reasonable.&lt;/p&gt;
&lt;p&gt;Given another solid week of development I may well have finished it in the way I intended&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;motivation&lt;/h2&gt;
&lt;p&gt;Last year I was only beginning to dip my toes into the Javascript ecosystem, learning technologies like React, Angular and&amp;nbsp;Vue.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m now hopelessly hooked on Javascript as a programming&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;I come from a C and C++ background, and would adamantly hold onto it (C++) as the One True&amp;nbsp;Language.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t get me wrong, I still love C++, and I still develop with it, but I love the Javascript development&amp;nbsp;ecosystem.&lt;/p&gt;
&lt;p&gt;Back to the point: Last year my motivation was that the jam itself was a&amp;nbsp;curiosity.&lt;/p&gt;
&lt;p&gt;This year, my motivation is that I wanted to learn more about Javascript. Mission&amp;nbsp;accomplished.&lt;/p&gt;
&lt;h1&gt;What went&amp;nbsp;wrong&lt;/h1&gt;
&lt;h2&gt;The&amp;nbsp;scope&lt;/h2&gt;
&lt;p&gt;Yes, this also went &lt;em&gt;wrong&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I went into this determined to make a game that would fit into the one month of development available to me, and designed my concept around this time&amp;nbsp;limit.&lt;/p&gt;
&lt;p&gt;I forgot to take working life into&amp;nbsp;account.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m what you could call an odd-jobber. I repair computers, I design small websites, I do basic graphics design for print as well as art for&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;What I failed to remember is that what seems like a slow month for callouts, contracts and commissions can easily become a maelstrom of&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;So for the first two weeks everything was silent. Then week 3 began with a flurry of activity from a few clients of mine, a rash of broken computers, support queries and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;This week was, again, busy - and also has me working on a website proposal for a local&amp;nbsp;business-owner.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll never complain about work, but I should have taken my estimate of &amp;#8220;Yeah, I can finish this in a month&amp;#8221; and cut it down to &amp;#8220;I &lt;em&gt;need&lt;/em&gt; the core game to be completed within a&amp;nbsp;week&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Lessons for next&amp;nbsp;year.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;code&lt;/h2&gt;
&lt;p&gt;In short: Don&amp;#8217;t develop games while short on&amp;nbsp;sleep.&lt;/p&gt;
&lt;p&gt;Most of my development efforts were happening between midnight and &lt;span class="caps"&gt;3AM&lt;/span&gt;, for&amp;nbsp;reasons.&lt;/p&gt;
&lt;p&gt;Coffee helps at the time, but nothing can prepare you for the next-day confusion (I call it code hangover), because you will not remember why you did what you did, nor what any of it does other than what was on the&amp;nbsp;&amp;#8216;tin&amp;#8217;.&lt;/p&gt;
&lt;p&gt;I spent a lot of my mornings fixing and replacing spaghetti code in order to continue&amp;nbsp;working.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;schedule&lt;/h2&gt;
&lt;p&gt;A month seems like such a long stretch of time when you&amp;#8217;re looking at it from the beginning of said&amp;nbsp;month.&lt;/p&gt;
&lt;p&gt;The month I had disappeared before I knew what happened. I had a schedule worked out, but I&amp;#8217;ll admit I fell into the trap of creating one code feature and taking a coffee break, even if that feature only took me 10 minutes to&amp;nbsp;make.&lt;/p&gt;
&lt;p&gt;Next year I&amp;#8217;ll be using the Pomodoro method and basically forcing myself to work solid blocks of time instead of taking breaks, much like I do when working on client&amp;nbsp;projects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2019&amp;nbsp;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I actually couldn&amp;#8217;t participate in 2018&amp;#8217;s JS13k due to a death in the family happening
at the same time as a big contract job. I was completely drained for the rest of the&amp;nbsp;year.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be making a comeback this&amp;nbsp;year!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Code&amp;nbsp;breakdown&lt;/h1&gt;
&lt;p&gt;And here we get to the real meat of this postmortem, or so I&amp;nbsp;hope.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s difficult to break down my decision making process when half of that process took place during the midnight shift, but I&amp;#8217;ll try to do a&amp;nbsp;code-walk.&lt;/p&gt;
&lt;p&gt;The code is all visible on &lt;a href="https://github.com/64Mega/lil-js13k"&gt;GitHub&lt;/a&gt;, so reference there if you need&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s begin with the first thing I made for the project: my index.html&amp;nbsp;file.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I kept it simple, and unlike last year&amp;#8217;s entry I defined the canvas element here instead of trying to create it in&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; I worked it out to be a saving of a couple of bytes that&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll also notice a single &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. This is a placeholder for an inline image that gets substituted by my gulpfile on&amp;nbsp;build.&lt;/p&gt;
&lt;p&gt;I have two image files for the entire game, one for tiles and one for sprites: But only the tiles image is inlined. I&amp;#8217;ll explain why further&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;Also seen here is a pretty standard &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag for setting up the display width and height. The game kinda works on mobile, but I didn&amp;#8217;t set up any virtual keys for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;If you have a tablet with an attachable keyboard, it works pretty much&amp;nbsp;as-expected.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Last year I made the quirky decision to forgo tools such as webpack or gulp and used C Preprocessor files to concatenate my source into a single &lt;span class="caps"&gt;JS&lt;/span&gt; file for&amp;nbsp;distribution.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll admit that it was because I thought I didn&amp;#8217;t have the time to learn the&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;This year, I made a point of learning gulp, and making use of the great resources page on the&amp;nbsp;JS13k.&lt;/p&gt;
&lt;p&gt;I stepped through one of the gulpfiles there and made a tweak or two to it as I progressed through development (The major one being the inlining of the tiles.png&amp;nbsp;image).&lt;/p&gt;
&lt;p&gt;Gulp is&amp;nbsp;awesome.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Another interjection from the&amp;nbsp;future&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I actually hesitate to recommend Gulp for anything outside of absurdly complex&amp;nbsp;deployments.&lt;/p&gt;
&lt;p&gt;For small projects and such, I recommend Parcel. It&amp;#8217;s refreshingly &lt;em&gt;simple&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Next up was my css. I like to have a pretty firm idea of what my game is going to look like on the player&amp;#8217;s&amp;nbsp;device.&lt;/p&gt;
&lt;p&gt;The main thing to note here is the #gcanvas styles, specifically the &lt;code&gt;image-rendering&lt;/code&gt;property.&lt;/p&gt;
&lt;p&gt;This is what allows me to render crispy pixels without fiddling too much with the&amp;nbsp;context.&lt;/p&gt;
&lt;p&gt;Also of note is that &lt;code&gt;#img-tiles&lt;/code&gt; gets hidden, since otherwise the browser would render it on top of the canvas, and that wouldn&amp;#8217;t do at&amp;nbsp;all.&lt;/p&gt;
&lt;h1&gt;Actual Game&amp;nbsp;Code&lt;/h1&gt;
&lt;p&gt;So here we start to get into the game&amp;#8217;s&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;A thing to note here is that originally I had a single file, &lt;code&gt;game.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I began to split parts of it off into separate files, and if you&amp;#8217;re wondering what the leading numbers are for, they&amp;#8217;re just there to order the files in my editor pane a&amp;nbsp;bit.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s dig into this, starting&amp;nbsp;with&amp;#8230;&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;1_config.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is basically my global configuration, where I&amp;#8217;m supposed to be keeping all of my&amp;nbsp;constants.&lt;/p&gt;
&lt;p&gt;I polluted it a bit at some point with the the two functions &lt;code&gt;afor&lt;/code&gt; and &lt;code&gt;rfor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Those two are&amp;nbsp;interesting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;afor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rfor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I made these during one of my midnight-shifts as, if I recall, a way to save a few bytes when needing a for loop to range over an array or, in the case of &lt;code&gt;rfor&lt;/code&gt;, up to a fixed&amp;nbsp;number.&lt;/p&gt;
&lt;p&gt;I wasted at least 10 minutes making these, then another 20 minutes replacing all of my for loops in the rest of the&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Want to know how much space this saved? I gained about 8&amp;nbsp;bytes.&lt;/p&gt;
&lt;p&gt;Premature optimization is&amp;nbsp;bad.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;2_input.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is my input handler. I took a look at &lt;a href="https://xem.github.io/articles/#jsgamesinputs"&gt;How to support arrow keys, &lt;span class="caps"&gt;WASD&lt;/span&gt; and &lt;span class="caps"&gt;ZQSD&lt;/span&gt; keyboard inputs in just 160b of &lt;span class="caps"&gt;JS&lt;/span&gt;&lt;/a&gt; on the Resources page, and initially decided to go with&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;I soon found that because I was using strict mode, I couldn&amp;#8217;t. I also found that I wanted my own input scheme, and at the time I was making this (Hint: Was past midnight) I didn&amp;#8217;t feel like code-golfing a tiny&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;So I brute-forced the problem. Un-minified, my input code is about 400 bytes of code and covers the entire range of keyboard&amp;nbsp;inputs.&lt;/p&gt;
&lt;p&gt;All it does is assume a 255 key maximum (Should be 256, but again: midnight code), and on keydown/keyup sets the &lt;span class="caps"&gt;KEYS&lt;/span&gt; array to 1 or&amp;nbsp;0.&lt;/p&gt;
&lt;p&gt;That was the original version. Then later on I decided I wanted a keypress check (E.G: Fire only on first&amp;nbsp;press).&lt;/p&gt;
&lt;p&gt;Normally for this I use an on-location bool &amp;#8216;toggle&amp;#8217;. Something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;kp_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;KEYS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;kp_space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Do a thing&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;kp_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;kp_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This takes up quite a bit of space and looks&amp;nbsp;ugly.&lt;/p&gt;
&lt;p&gt;So again I leveraged the fact that I had no restrictions on memory and defined a mirror array called &lt;span class="caps"&gt;PRKS&lt;/span&gt; (Pressed Keys). On key down, the &lt;span class="caps"&gt;KEYS&lt;/span&gt; array is set to 1, but not the &lt;span class="caps"&gt;PRKS&lt;/span&gt;&amp;nbsp;array.&lt;/p&gt;
&lt;p&gt;When the function &lt;code&gt;pressed&lt;/code&gt; is called, then the &lt;span class="caps"&gt;PRKS&lt;/span&gt; array is set using a little block of ternary, which also flags the return value as &lt;code&gt;false&lt;/code&gt; if &lt;span class="caps"&gt;PRKS&lt;/span&gt; is already set to&amp;nbsp;1.&lt;/p&gt;
&lt;p&gt;The onkeyup handler sets &lt;span class="caps"&gt;PRKS&lt;/span&gt; back to 0&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;That changed that ugly block of code above to&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do a thing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then there&amp;#8217;s the &lt;code&gt;held&lt;/code&gt; function that is a more readable check against the &lt;span class="caps"&gt;KEYS&lt;/span&gt;&amp;nbsp;array.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;3_render.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s where I have all of my drawing functions (I&amp;nbsp;think).&lt;/p&gt;
&lt;p&gt;The first thing to note is two constants that &lt;em&gt;shouldn&amp;#8217;t be here&lt;/em&gt;. They should be in &lt;code&gt;1_config.js&lt;/code&gt;, but hey, jam&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PALETTE&lt;/code&gt; array is 16 hard coded palette entries. I chose the Arne16 palette in Aseprite for my game from the start, and I&amp;#8217;ll show how I leveraged this later&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;palette_match&lt;/code&gt; function compares &lt;span class="caps"&gt;RGB&lt;/span&gt; values with the &lt;code&gt;PALETTE&lt;/code&gt; array, which was used for the leverage I mentioned&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;load_spritemap()&lt;/code&gt; and &lt;code&gt;load_tilemap()&lt;/code&gt; do what they say on the tin, but &lt;code&gt;load_tilemap()&lt;/code&gt; is no longer in use and should have been&amp;nbsp;removed.&lt;/p&gt;
&lt;p&gt;You can see here a little &amp;#8216;cheat&amp;#8217; I did to get myself a quick set of flipped sprites without using up more bytes than&amp;nbsp;necessary.&lt;/p&gt;
&lt;p&gt;I draw the sprites.png image onto a new canvas, flipped, and save that to the &lt;code&gt;DATA&lt;/code&gt; block, that you&amp;#8217;ll be seeing&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;Below this is &lt;code&gt;drawsprite&lt;/code&gt;, this takes an array of cell values and performs a lookup into the&amp;nbsp;spritesheet.&lt;/p&gt;
&lt;p&gt;It works row-wise, left to right. Sprite 0 is at 0px,0px, Sprite 1 is at 16px,0px, Sprite 16 is at 0px,16px,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;You can see here that a global timer is used to determine which frame to draw, and here you can also see the flipped sprite image being&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;The only other real functions of note are &lt;code&gt;drawtext&lt;/code&gt; and &lt;code&gt;drawnum&lt;/code&gt;, those draw 8x8 cells from the spritesheet at specific locations (Hard coded). Saved me having to make a full font sheet, also saved a few&amp;nbsp;bytes.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;4_player.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;And here is the messiest (And largest) file in the&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;The player code went through several changes during my development process, and I remember fondly when my &lt;code&gt;playerdata&lt;/code&gt; structure consisted of nothing more than &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;Aside from a few artifacts left over from refactoring, things should be fairly straightforward to read through in this&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;At some point I decided to use a state machine to perform actions, but I strayed from the pattern halfway through, so excuse that&amp;nbsp;mess.&lt;/p&gt;
&lt;p&gt;The main entrypoint is the &lt;code&gt;obj.update&lt;/code&gt; method, and the majority of the code in the &lt;code&gt;st_*&lt;/code&gt; functions is hastily thrown together implementations of basic game mechanics (E.G: Gravity and&amp;nbsp;collision).&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;5_audio.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This was the last piece of code I worked on before I had to submit&amp;nbsp;early.&lt;/p&gt;
&lt;p&gt;After reading a few of the articles on the Resource page and looking at some of the music generators, I decided to go take a look at the Audio &lt;span class="caps"&gt;API&lt;/span&gt; myself, and set up a simple tone&amp;nbsp;generator.&lt;/p&gt;
&lt;p&gt;It kinda works, but also kinda doesn&amp;#8217;t&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I have ideas as to why, but it&amp;#8217;s been ages since I&amp;#8217;ve worked with audio. Next year I&amp;#8217;ll put some extra effort into&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;11_enemy.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Another large file. This one is a bit of a lie: It says &lt;code&gt;enemy&lt;/code&gt; but is, in fact, &lt;code&gt;entity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Originally I started out making this solely a file handling enemy behaviors and&amp;nbsp;updates.&lt;/p&gt;
&lt;p&gt;Then I decided I wanted to add a little explosion effect on enemy death, and decided to just leverage the fact that I had a manager already: Thus was born the EnemyManager that I never got around to renaming to&amp;nbsp;EntityManager.&lt;/p&gt;
&lt;p&gt;You can see here that the behaviors for the enemies are pretty simple, they have no gravity and no refined collision&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;Not too much to say about this one, it&amp;#8217;s pretty much standard implementation&amp;nbsp;detail.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;99_game.js&lt;/code&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// BEWARE: Here be messy and incoherent code and/or dragons.&lt;/span&gt;
&lt;span class="c1"&gt;// You have been warned.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first two lines I wrote during&amp;nbsp;development.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m a code pessimist. I wasn&amp;#8217;t strictly &lt;em&gt;wrong&lt;/em&gt;,&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;Here you can see a few bits and pieces: Data storage, Game states, World and&amp;nbsp;Camera.&lt;/p&gt;
&lt;p&gt;Also a poorly placed &lt;code&gt;load_spritemap()&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;The big block of code below all that though is what made the game, as far as I was&amp;nbsp;concerned.&lt;/p&gt;
&lt;p&gt;During development, one of my biggest concerns was how to fit meaningful level data in the game without making the filesize hit 13k too&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;Arrays and base64 encoding took too much space as far as I was concerned (Did test them out), they would have limited the total playfield to a pretty small&amp;nbsp;size.&lt;/p&gt;
&lt;p&gt;Procedural generation is always an option, but I have a predisposition towards wanting to hand-design my levels. Can assure that people are playing the game the way I intended it that&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;So I decided to leverage my existing&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;I sacrificed half of my &lt;code&gt;tiles.png&lt;/code&gt; image to become a map. If you open it, you&amp;#8217;ll see the level drawn on the right-hand-side of the&amp;nbsp;image.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;build_levels&lt;/code&gt; function iterates over that half and adds tiles to the &lt;span class="caps"&gt;WORLD&lt;/span&gt;&amp;nbsp;structure.&lt;/p&gt;
&lt;p&gt;This is the reason I had to inline my tiles.png image: The &lt;span class="caps"&gt;HTML5&lt;/span&gt; canvas will complain about the canvas being tainted if you draw an externally loaded image to it then try to read back from it (&lt;span class="caps"&gt;CORS&lt;/span&gt;&amp;nbsp;related).&lt;/p&gt;
&lt;p&gt;I got around it by sacrificing a few bytes to inline the image, and the result is that I had a &amp;#8216;level editor&amp;#8217; at hand in the form of&amp;nbsp;Aseprite.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a zoomed-in picture of the game&amp;#8217;s map as it stands&amp;nbsp;now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="zoomed-in picture of game level" src="https://i.imgur.com/NmSp956.png"&gt;&lt;/p&gt;
&lt;p&gt;Each color in my 16-color palette means something. White is&amp;nbsp;walls/floors.&lt;/p&gt;
&lt;p&gt;Red is an enemy, and is randomly chosen from a pool. My plan was to later use the screen-y value to modify the pool, so harder enemies would show up the further you&amp;nbsp;went.&lt;/p&gt;
&lt;p&gt;The green dot is the player spawn, and the orange line is an &amp;#8216;obstacle&amp;#8217;. Each Y level would have an obstacle, and this was my way of adding variation without needing more than 16&amp;nbsp;colors.&lt;/p&gt;
&lt;p&gt;Ditto for the walls and floors. The tilemap is assigned from top-to-bottom, with each Y level getting the next one&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;I was quite proud of this, it sped the development process up considerably, and kept my options limited (A good thing in game jams and&amp;nbsp;competitions).&lt;/p&gt;
&lt;p&gt;At this point, the remainder of the file is standard implementation, no trickery&amp;nbsp;involved.&lt;/p&gt;
&lt;h1&gt;Final&amp;nbsp;Notes&lt;/h1&gt;
&lt;p&gt;That was a beast to&amp;nbsp;write.&lt;/p&gt;
&lt;p&gt;Another lesson for next year: Take notes, or at least comment more. It&amp;#8217;ll make writing the postmortem a lot&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;I had a load of fun this year, and look forward to next year&amp;#8217;s&amp;nbsp;competition.&lt;/p&gt;
&lt;p&gt;Thanks for&amp;nbsp;reading!&lt;/p&gt;</content><category term="Game Development"></category><category term="JavaScript"></category><category term="JS13k"></category><category term="Postmortem"></category></entry></feed>